/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import com.whispir.model.DistributionList;
import com.whispir.model.DistributionListCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DistributionListsApi
 */
@Disabled
public class DistributionListsApiTest {

    private final DistributionListsApi api = new DistributionListsApi();

    /**
     * Delete a distribution list
     *
     * You can only delete the distribution list that you have created or a valid userId associated with the specific distribution list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDistributionListsByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String distributionlistId = null;
        api.deleteDistributionListsById(workspaceId, xApiKey, distributionlistId);
        // TODO: test validations
    }

    /**
     * List distribution lists
     *
     * The distribution list is usually retrieved by its id, but one can also search or refer to the distribution list by its name. This feature has to do with the unique name requirement for the distribution list.  Apart from the name, the description field can also be used to search for a distribution list. While name can be directly used to send in messages, the description is solely for the purpose of search. Once search yields the required result, the mri has to be picked from the selected DL and then used to send the messages.  Both these operations can be performed by passing in the relevant search parameters in the URL as query params.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionListsTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        String name = null;
        String description = null;
        DistributionListCollection response = api.getDistributionLists(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, name, description);
        // TODO: test validations
    }

    /**
     * Retrieve a distribution list
     *
     * A distribution list allows you to associate the following:  *   **ContactIds** (type:String) is a comma separated list of Contact IDs that you would like added to the list. *   **UserIds** (type:String) specifies the Whispir Users that should also be notified when this list is used. *   **DistListIds** (type:String) specifies the nested lists that are contained within this distribution list.  Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc).  The steps usually are:  1. Create a Distribution List (DL) 2. While creating the DL itself, you can put in the ContactIds, UserIds, distListIds (nested) so that the DL is created with those values readily placed in. 3. After the DL is created, if you want to add/update the values, then 4. Do a GET request to retrieve the specific DL.    -  This will return you the DL object 5. Modify the DL properties (name, description, contactIds, UserIds, dlIds, location etc) as needed 6. Do a PUT request to update the DL details    -  Successful update gives you a 204 No Content    -  The contactIds, userIds, distListIds can be passed all together in a single request.  Note: 1.  If an existing contactId is again added, it does neither throws an error, nor create two entries. The contactId is just neglected and only 1 record is maintained. 2.  If the PUT request was successful, the expected response code is a 204 No Content 3.  For Modifying the Location Information refer to Location Tags for Distribution Lists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionListsByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        String distributionlistId = null;
        DistributionList response = api.getDistributionListsById(workspaceId, xApiKey, accept, distributionlistId);
        // TODO: test validations
    }

    /**
     * Create a distribution list
     *
     * Distribution lists can be created within the Default Workspace, or within a Specific Workspace. More information on Workspaces will be provided later in this documentation.  The MRI value is important here. It is the required unique identifier for any communications that are to be sent out to this distribution list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDistributionListsTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        DistributionList distributionList = null;
        DistributionList response = api.postDistributionLists(workspaceId, xApiKey, contentType, accept, distributionList);
        // TODO: test validations
    }

    /**
     * Update a distribution list
     *
     * Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc).  The steps usually are: 1.  Create a Distribution List (DL) 2.  While creating the DL itself, you can put in the ContactIds, UserIds, distListIds (nested) so that the DL is created with those values readily placed in. 3.  After the DL is created, if you want to add/update the values, then 4.  Do a GET request to retrieve the specific DL.     - This will return you the DL object 5.  Modify the DL properties (name, description, contactIds, UserIds, dlIds, location etc) as needed 6.  Do a PUT request to update the DL details     - Successful update gives you a 204 No Content     - The contactIds, userIds, distListIds can be passed all together in a single request.  Note: - If an existing contactId is again added, it does neither throws an error, nor create two entries. The contactId is just neglected and only 1 record is maintained. - If the PUT request was successful, the expected response code is a 204 No Content - For Modifying the Location Information refer to Location Tags for Distribution Lists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDistributionListsByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        String distributionlistId = null;
        DistributionList distributionList = null;
        api.putDistributionListsById(workspaceId, xApiKey, contentType, accept, distributionlistId, distributionList);
        // TODO: test validations
    }

}
