/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import com.whispir.model.Template;
import com.whispir.model.TemplateCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplatesApi
 */
@Disabled
public class TemplatesApiTest {

    private final TemplatesApi api = new TemplatesApi();

    /**
     * Delete a template
     *
     * **Note:** When a template is DELETED, all the associated Scenarios, events, and references of template use in other endpoints will fail. So, ensure that the template is not used anywhere before it is deleted. Whispir **will not** do that check before it deletes the template. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTemplatesByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String templateId = null;
        String contentType = null;
        String accept = null;
        api.deleteTemplatesById(workspaceId, xApiKey, templateId, contentType, accept);
        // TODO: test validations
    }

    /**
     * List templates
     *
     * List all message templates for the workspace.  Pagination is available. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplatesTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        TemplateCollection response = api.getTemplates(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields);
        // TODO: test validations
    }

    /**
     * Retrieve a template
     *
     * Retrieves a message template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplatesByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String templateId = null;
        String accept = null;
        Template response = api.getTemplatesById(workspaceId, xApiKey, templateId, accept);
        // TODO: test validations
    }

    /**
     * Create a template
     *
     * Create a message template, combining multi-channel content for use with the Message resource. The message template can be reused across multiple sent messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTemplatesTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        Template template = null;
        Template response = api.postTemplates(workspaceId, xApiKey, contentType, accept, template);
        // TODO: test validations
    }

    /**
     * Update a template
     *
     * **Note:** Currently users cannot update templates with the same name as a template that already exists in Whispir. Users can overcome this by saving the updated template with a new name, then either changing this back in a subsequent save, or retaining the updated name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTemplatesByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String templateId = null;
        String contentType = null;
        String accept = null;
        Template template = null;
        api.putTemplatesById(workspaceId, xApiKey, templateId, contentType, accept, template);
        // TODO: test validations
    }

}
