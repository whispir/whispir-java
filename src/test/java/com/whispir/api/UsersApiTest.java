/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import com.whispir.model.User;
import com.whispir.model.UserCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Delete all users
     *
     * Delete all users in the company.  **Note**: use this endpoint with caution!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsersTest() throws ApiException {
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        api.deleteUsers(xApiKey, contentType, accept);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * After performing this request, the response does not contain any information other than the headers as it is not necessary.  The delete a user if successful shall respond with a 204 No Content. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsersByIdTest() throws ApiException {
        String xApiKey = null;
        String userId = null;
        String contentType = null;
        String accept = null;
        api.deleteUsersById(xApiKey, userId, contentType, accept);
        // TODO: test validations
    }

    /**
     * List users
     *
     * Retrieve a list of users in the account. The result will only be limited to users with ACTIVE status. User’s with other status will not be listed in the results.  Once the request is placed, the response will be a list of url’s to each of the users that the API user has access to/or has requested for via the search criteria.  **Note:** The sample request here shows users from the company the existing API user is associated with. You cannot retrieve users list from outside of your company and users with status !&#x3D; ACTIVE.  ## Retrieving workspace users To retrieve the list of users, the request is made to via GET to &#x60;/workspaces/{workspaceId}/users&#x60; endpoint.  By default there will be a limit of 20 users returned in a request.  The user will use the limit and offset query parameters to determine how many users they would like to receive. (default when not provided will be limit&#x3D;20 &amp; offset&#x3D;0)  ### Searching for users Users can be searched for in a given company by passing in valid search criteria. The search criteria usually can be any of the following user elements (field names) and will be sent in as part of the URI as query parameters. *   First Name *   Last Name *   Title *   Job Title *   Country *   Timezone *   Organization Name *   Division *   Business Unit *   Department *   Team Name *   Role *   Additional Team Name *   Additional Role *   Work Email Address 1 *   Work Mobile Phone 1 *   Work Phone Area Code 1 *   Work Phone 1 *   Status * (see note below)  **Note:** While searching for users via status, use the short code ‘A’ for ACTIVE, similarly, &#39;I’ for INACTIVE, rather than the full words ACTIVE, INACTIVE, etc. so, it is &amp;status&#x3D;A not &amp;status&#x3D;ACTIVE. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String xApiKey = null;
        String accept = null;
        String fieldname = null;
        String sortOrder = null;
        String sortFields = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        UserCollection response = api.getUsers(xApiKey, accept, fieldname, sortOrder, sortFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Retrieve a user
     *
     * Retrieves a User object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersByIdTest() throws ApiException {
        String xApiKey = null;
        String userId = null;
        String accept = null;
        User response = api.getUsersById(xApiKey, userId, accept);
        // TODO: test validations
    }

    /**
     * List workspace users
     *
     * Returns a list of your Users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceUsersTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        String sortOrder = null;
        String sortFields = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        UserCollection response = api.getWorkspaceUsers(workspaceId, xApiKey, accept, sortOrder, sortFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Create a user
     *
     * Create a new user. Ensure that the necessary permissions are provided to the API account to create or modify user accounts.  ### Activating a User after the creation  When created new users are in the PENDING (P) state. To Activate the user, the User must be set to INACTIVE first via a PUT request and then finally set to ACTIVE (A) via another PUT. They cannot be directly set to (A) from (P).  An user when created is assigned the PENDING status. So, to set the user to ACTIVE, one has to follow the “user state machine” rules. Here’s how we do it: 1.  POST /users for user account creation. Capture the Location header value which is the unique link to the User record. This is used in Step 2 2.  GET /users/{userId} for the user object 3.  PUT /users/{userId} with STATUS set to &#39;INACTIVE’ - using the user object retreived in step 2 4.  PUT /users/{userId} with STATUS set to &#39;ACTIVE’ - using the user object retreived in step 2  **Note:** The status text is case sensitive. Lowercase or mixed case text is invalid. Always use uppercase.  Example: active !&#x3D; ACTIVE; inActive !&#x3D; INACTIVE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsersTest() throws ApiException {
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        User user = null;
        User response = api.postUsers(xApiKey, contentType, accept, user);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * The application must provide all the fields during the update request, even if they are not being updated.  **Any missing fields, except for the password field, will be automatically removed from the existing record.**  **Note:** You cannot selectively update the user fields needed as this is a PUT request.  So the standard process for updating a user record is:  1.  GET &#x60;/users/{id of user}&#x60; 2.  Update the user field in the object to the required value 3.  PUT &#x60;/users/{id of user}&#x60; the new object  The response to the PUT request upon success is usually a 204 with no content being provided. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putUsersByIdTest() throws ApiException {
        String xApiKey = null;
        String userId = null;
        String contentType = null;
        String accept = null;
        User user = null;
        api.putUsersById(xApiKey, userId, contentType, accept, user);
        // TODO: test validations
    }

}
