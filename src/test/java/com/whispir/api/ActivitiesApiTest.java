/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.Activity;
import com.whispir.model.ActivityCollection;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActivitiesApi
 */
@Disabled
public class ActivitiesApiTest {

    private final ActivitiesApi api = new ActivitiesApi();

    /**
     * List activities
     *
     * ### Search or Filter on Activity Logs Activity logs can become quickly huge owing to the amount of actions performed. In such cases, to have a proper filtering of data during a GET /activities, Whispir API provides very neat filtering options on the data.  All filter options are to be passed in as URL query parameters.  **Note:** The API currently results in a 404 Not Found when there are no activities present in the log for a given search criteria. This should not be not confused with a failed response. But rather as No Data Found. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivitiesTest() throws ApiException {
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        String action = null;
        String module = null;
        String user = null;
        String workspace = null;
        String status = null;
        String description = null;
        String startTime = null;
        String endTime = null;
        ActivityCollection response = api.getActivities(xApiKey, accept, limit, offset, sortOrder, sortFields, action, module, user, workspace, status, description, startTime, endTime);
        // TODO: test validations
    }

    /**
     * List workspace activities
     *
     * ## Restricting to only a single workspace  By default, GET /activities returns all the activities at company level. This covers all the workspaces. So, if the items has to limited to a specific workspace, one has to use the workspace as the endpoint and activities followed by it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceActivitiesTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        ActivityCollection response = api.getWorkspaceActivities(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields);
        // TODO: test validations
    }

    /**
     * Create an activity
     *
     * Activities are all the individual changes, tasks, calls, messages and so on performed in a given company workspace. Each activity log entry contains information about the workspace, the module (message, email, IVR ...), the user who performed the activity, time stamps, description of the activity, its status (success, fail) and so on.  All of these help meet auditing and standards compliance and also change tracking. For example: * As a Whispir API user (Voice module), you want to be able to update the Whispir activity log as a call progresses through the IVR to ensure that the auditing shows exactly what information a caller heard.  * As a Whispir API user (SMS module), you want to able to retrieve information from the activity log about all the messages sent by a specific user. As activity information is sensitive, stricter permission rules apply to the data served by these endpoints.  * If the user is a *Company Administrator* or *Company Leader*, retrieving the activity will produce a **_200 OK_** with the valid response * If the user is a *Company Member* or *Company Guest*, they will receive instead a **_403 Forbidden_** response advising that they don’t have permission to access this resource * A *Company Administrator* or *Company Leader* can also create content within the activity stream. They do this through a POST of data to either the _/activities_ endpoint or to the specific activity ID * They must specify a valid _‘Action’_, _‘Description’_ and _‘Status’_ within their request * Posting to the _/activities_ endpoint will create a new activity * Posting to the _/activities/{ID}_ endpoint will append the content to the detail of the specified activity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postActivitiesTest() throws ApiException {
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        Activity activity = null;
        Activity response = api.postActivities(xApiKey, contentType, accept, activity);
        // TODO: test validations
    }

}
