/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import com.whispir.model.Resource;
import com.whispir.model.ResourceCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Disabled
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    /**
     * Delete a resource
     *
     * Resources can be deleted after use. These can be both public and private in scope.    **Note:** Deleting a public resource may result in 404 File Not Found error for any sites or material referencing to it. So, ensure that DELETE is only executed when the reference to all material is removed or the content has to be removed for other purposes immediately. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcesByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String resourceId = null;
        api.deleteResourcesById(workspaceId, xApiKey, resourceId);
        // TODO: test validations
    }

    /**
     * List resources
     *
     * Existing resources can be easily retrieved via the GET /resources API call. The response lists all of the existing public and private resources available in the system.  **name:** String   - Specifies the name of the resource. The name is given during creation.  **scope:** String   - Specifies the permission scope of the file being uploaded.  **mimeType:** String   - The mime type of the file that is being uploaded.  **url:** String   - The downloaded link to the resource location. Browsing this link results in a download of the resource.   - **Note:** Only available for Public scoped resources.  **link:** Array   - Provides a list of URLs that can be used to manipulate or access the message template.   - uri - the link to access the message template   - rel - the descriptor for what the link will do   - method - the HTTP method to use with this particular link  ## Filtering search results  **Note:** when it comes to searching by name, the equal sign must be intended as &#x60;contains&#x60; rather than &#x60;equals&#x60;. So, if we search resources with the value equals to &#x60;in&#x60; we might be given back   **Eg** (&#x60;India.csv&#x60; and &#x60;Indonesia.json&#x60; but also &#x60;Argentina.csv&#x60;)  ### Filtering By scope  Resources can be filtered by their scope. This can be achieved by sending in the required scope type in the URL as query parameter. The scope can be one of the allowed scope types.  *   Public - &amp;scope&#x3D;public *   Private - &amp;scope&#x3D;private  ### Filtering By name  Resources can be filtered by their name. This can be achieved by sending in the name in the URL as query parameter.  **Note:** The name including the file extension makes it a unique search.  **Eg:** - &amp;name&#x3D;australia.csv 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        String scope = null;
        String name = null;
        ResourceCollection response = api.getResources(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, scope, name);
        // TODO: test validations
    }

    /**
     * Retrieve a resource
     *
     * A single resource (public|private) can be retrieved from the available resource by using the resource’s specific link uri 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        String resourceId = null;
        Resource response = api.getResourcesById(workspaceId, xApiKey, accept, resourceId);
        // TODO: test validations
    }

    /**
     * Create a resource
     *
     * ### High-Level Response Elements  **name:** String   *   Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name. **Eg:** australia-contacts.csv *   **Note:** It is advised that names should not contain spaces or special characters other than &#x60;-&#x60; and &#x60;.&#x60;. This helps for easier search and also for a valid URL link (especially) in case of public scoped files. *   **Eg:** &#x60;australia-contacts.csv&#x60; is better name convention than &#x60;australia contacts.csv&#x60; as the latter converts into &#x60;australia%20contacts.csv&#x60;.    **scope:** String   Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can be only one between:   *   **Public -** Public files have an addressable URL and are available publicly   *   **Private -** Private files have no URL and are only available for bulk messaging purposes and for importing contacts.  **mimeType:** String   The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.   *   **Public -** Public files can be of any mimetype. &#x60;text/html&#x60;; &#x60;text/csv&#x60;   *   **Private -** Private files are restricted to &#x60;CSV&#x60;, &#x60;JSON&#x60;, and &#x60;XML&#x60;  **derefUri:** The base64 representation of the file being submitted.  **Note:** When creating a resource, the following conditions apply -  *   Maximum of 10MB per file being uploaded. *   Transactions will have an enforced timeout. *   Resources will be available in the Whispir Platform for a limited timeframe (30 days). These will then be automatically cleaned. This will be a configurable setting for Whispir Administrators.  ### Upload the Resource file via API   To upload a file to Whispir’s API, users will make an API call to the /resources endpoint.   Applications can use this endpoint to store the source files for dynamic messages. This endpoint can also be used to store any file based data (e.g. images, pdf documents, spreadsheets) for an unlimited amount of time.    **Note:** The types of files allowed are - &#x60;CSV&#x60;, &#x60;JSON&#x60;, &#x60;XML&#x60;, Images [&#x60;JPEG&#x60;, &#x60;PNG&#x60;], and &#x60;WAV&#x60;.    Information about the resources endpoint is documented in the Resources section of the documentation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postResourcesTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        Resource resource = null;
        Resource response = api.postResources(workspaceId, xApiKey, contentType, accept, resource);
        // TODO: test validations
    }

    /**
     * Update a resource
     *
     * Updating a resource involves the same process as in creating a resource. The process of using one of the format (CSV, JSON, XML) for private and any format for public -&gt; converting to base64 encoded data is the same.   The change is doing a PUT to the existing resource URL that needs to be updated. Please be careful that doing an update overwrites the previous resource. There is no versioning available in Whispir for the resources.   Any or all of the 4 values can be changed. i.e, name, scope, mimeType, derefUri, but all 4 are mandatory values to be sent. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcesByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        String resourceId = null;
        Resource resource = null;
        Resource response = api.putResourcesById(workspaceId, xApiKey, contentType, accept, resourceId, resource);
        // TODO: test validations
    }

}
