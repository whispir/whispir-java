/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import com.whispir.model.Contact;
import com.whispir.model.ContactCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Disabled
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    /**
     * Delete a contact
     *
     * After performing this request, the response does not contain any information other than the headers as it is not necessary.  The user has requested to delete a contact, and when the response of 204 No Content is returned, the contact is successfully deleted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactsByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contactId = null;
        String action = null;
        api.deleteContactsById(workspaceId, xApiKey, contactId, action);
        // TODO: test validations
    }

    /**
     * List contacts
     *
     * **Note:** There is no global search feature available where one can search on all the workspaces present in the system (under allowed user permission). So, When no workspace is provided, the search is performed on the default workspace of the user.  ### Searching for contacts with Custom Fields  As Whispir supports extension of the default Contact Profile through the use of Custom Fields. There may be cases where users want to search for Contacts that contain these specific fields. As such, the Whispir API supports searching for contacts using these custom fields.  Any custom field can be searched by adding the custom_ prepended to the name.  For example, if the field name is **StaffId**, then the URL would search for:  &#x60;/contacts?custom_StaffId&#x3D;12345&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        String fieldname = null;
        Boolean customFields = null;
        ContactCollection response = api.getContacts(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, fieldname, customFields);
        // TODO: test validations
    }

    /**
     * Retrieve a contact
     *
     * ### Showing Custom Fields  Whispir supports extension of the default Contact Profile through the use of Custom Fields. Custom fields can support other fields that may be required to be stored on your Contacts, such as Staff ID, Internal Billing Codes, or One Up Manager.  These custom fields can be configured on any account through a Change Request to Whispir.  In order to reveal these custom fields on the contact profile, you can use the &#x60;customFields&#x3D;true&#x60; flag within your API request.  Example: &#x60;/contacts/AB38CB3EFD38AFDB?customFields&#x3D;true&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contactId = null;
        String accept = null;
        String fields = null;
        String sortOrder = null;
        String sortFields = null;
        Contact response = api.getContactsById(workspaceId, xApiKey, contactId, accept, fields, sortOrder, sortFields);
        // TODO: test validations
    }

    /**
     * Create a contact
     *
     * Creates a Contact object. The Contact can be used as a recipient when sending multi-channel messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postContactsTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        String contentType = null;
        Contact contact = null;
        Contact response = api.postContacts(workspaceId, xApiKey, accept, contentType, contact);
        // TODO: test validations
    }

    /**
     * Update a contact
     *
     * The application must provide all the fields during the update request, even if they are not being updated.  ## **NOTE:** Any missing fields will be automatically removed from the existing record.  **Note:** You cannot selectively update the contact fields needed as this is a PUT request.  1.  GET &#x60;/contact/{id of contact}&#x60; 2.  Update the contact field in the object to the required value 3.  PUT &#x60;/contact/{id of contact}&#x60; the new object  The response to the PUT request upon success is usually a 204 with no content being provided. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putContactsByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contactId = null;
        String accept = null;
        String contentType = null;
        Contact contact = null;
        api.putContactsById(workspaceId, xApiKey, contactId, accept, contentType, contact);
        // TODO: test validations
    }

}
