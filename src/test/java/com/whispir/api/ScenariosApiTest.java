/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.api;

import com.whispir.client.ApiException;
import com.whispir.model.ApiError;
import java.math.BigDecimal;
import com.whispir.model.Scenario;
import com.whispir.model.ScenarioCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScenariosApi
 */
@Disabled
public class ScenariosApiTest {

    private final ScenariosApi api = new ScenariosApi();

    /**
     * Delete a scenario
     *
     * Deletes a Scenario object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScenariosByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String scenarioId = null;
        api.deleteScenariosById(workspaceId, xApiKey, scenarioId);
        // TODO: test validations
    }

    /**
     * List scenarios
     *
     * Returns a list of your scenarios.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScenariosTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortOrder = null;
        String sortFields = null;
        ScenarioCollection response = api.getScenarios(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields);
        // TODO: test validations
    }

    /**
     * Retrieve a scenario
     *
     * Retrieves a Scenario object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScenariosByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String accept = null;
        String scenarioId = null;
        Scenario response = api.getScenariosById(workspaceId, xApiKey, accept, scenarioId);
        // TODO: test validations
    }

    /**
     * Create a scenario
     *
     * A scenario is a combination of a message and contacts. So, its structure contains section for both message as well as contact information. API currently only supports creation of scenario with SMS as communication mode. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScenariosTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        Scenario scenario = null;
        api.postScenarios(workspaceId, xApiKey, contentType, accept, scenario);
        // TODO: test validations
    }

    /**
     * Run a scenario
     *
     * Running a scenario triggers the communication to the intended recipients. The message (static or dynamic) will be sent on all the provided channels.  Running a scenario is very simple to do. The specific scenario has to called via a /POST request.  Step wise example: 1. Get all the scenarios 2. Pick the required scenarioâ€™s link attribute 3. Make a /POST call  Now invoking this scenario is just making a /POST call. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScenariosByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        String scenarioId = null;
        api.postScenariosById(workspaceId, xApiKey, contentType, accept, scenarioId);
        // TODO: test validations
    }

    /**
     * Update a scenario
     *
     * Updates a Scenario object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putScenariosByIdTest() throws ApiException {
        String workspaceId = null;
        String xApiKey = null;
        String contentType = null;
        String accept = null;
        String scenarioId = null;
        Scenario scenario = null;
        api.putScenariosById(workspaceId, xApiKey, contentType, accept, scenarioId, scenario);
        // TODO: test validations
    }

}
