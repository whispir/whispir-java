/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CallbackAuth;
import org.openapitools.client.model.CallbackCallbacks;
import org.openapitools.client.model.LinkInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * The callback object, used to configure the callback (also known as webhook).
 */
@ApiModel(description = "The callback object, used to configure the callback (also known as webhook).")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-22T09:38:29.014059Z[Etc/UTC]")
public class Callback {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private CallbackAuth auth;

  /**
   * Specifies the content type that should be sent to this endpoint.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
  public enum ContentTypeEnum {
    JSON("json"),
    
    XML("xml");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  /**
   * Specifies whether HTML should be stripped from responses.
   */
  @JsonAdapter(RemoveHTMLEnum.Adapter.class)
  public enum RemoveHTMLEnum {
    ENABLED("enabled"),
    
    DISABLED("disabled");

    private String value;

    RemoveHTMLEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RemoveHTMLEnum fromValue(String value) {
      for (RemoveHTMLEnum b : RemoveHTMLEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RemoveHTMLEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RemoveHTMLEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RemoveHTMLEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RemoveHTMLEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REMOVE_H_T_M_L = "removeHTML";
  @SerializedName(SERIALIZED_NAME_REMOVE_H_T_M_L)
  private RemoveHTMLEnum removeHTML = RemoveHTMLEnum.DISABLED;

  public static final String SERIALIZED_NAME_RETRIES_ENABLED = "retriesEnabled";
  @SerializedName(SERIALIZED_NAME_RETRIES_ENABLED)
  private Boolean retriesEnabled = false;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_CALLBACKS = "callbacks";
  @SerializedName(SERIALIZED_NAME_CALLBACKS)
  private CallbackCallbacks callbacks;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<LinkInner> link = null;

  public Callback() { 
  }

  
  public Callback(
     String id, 
     List<LinkInner> link
  ) {
    this();
    this.id = id;
    this.link = link;
  }

   /**
   * The id of the callback.   This is the value that should be passed when referring to the callback using the API endpoints
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4452AC8359535C46", value = "The id of the callback.   This is the value that should be passed when referring to the callback using the API endpoints")

  public String getId() {
    return id;
  }




  public Callback name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the callback.   This is the value that should be passed in the message payload for triggering the callbacks
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Callback Name", required = true, value = "The name of the callback.   This is the value that should be passed in the message payload for triggering the callbacks")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Callback url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Specifies the service URL that API Callbacks should be forwarded to.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://example.com/callback", required = true, value = "Specifies the service URL that API Callbacks should be forwarded to.")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public Callback auth(CallbackAuth auth) {
    
    this.auth = auth;
    return this;
  }

   /**
   * Get auth
   * @return auth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CallbackAuth getAuth() {
    return auth;
  }


  public void setAuth(CallbackAuth auth) {
    this.auth = auth;
  }


  public Callback contentType(ContentTypeEnum contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Specifies the content type that should be sent to this endpoint.
   * @return contentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the content type that should be sent to this endpoint.")

  public ContentTypeEnum getContentType() {
    return contentType;
  }


  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


  public Callback removeHTML(RemoveHTMLEnum removeHTML) {
    
    this.removeHTML = removeHTML;
    return this;
  }

   /**
   * Specifies whether HTML should be stripped from responses.
   * @return removeHTML
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies whether HTML should be stripped from responses.")

  public RemoveHTMLEnum getRemoveHTML() {
    return removeHTML;
  }


  public void setRemoveHTML(RemoveHTMLEnum removeHTML) {
    this.removeHTML = removeHTML;
  }


  public Callback retriesEnabled(Boolean retriesEnabled) {
    
    this.retriesEnabled = retriesEnabled;
    return this;
  }

   /**
   * Specifies whether Whispir should perform retries in the event there is a failure accessing the callback service.
   * @return retriesEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Specifies whether Whispir should perform retries in the event there is a failure accessing the callback service.")

  public Boolean getRetriesEnabled() {
    return retriesEnabled;
  }


  public void setRetriesEnabled(Boolean retriesEnabled) {
    this.retriesEnabled = retriesEnabled;
  }


  public Callback email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Whispir notify this email address that a callback has failed (only when retries are disabled).   The email will contain the details of the callback content.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "me@example.com", required = true, value = "Whispir notify this email address that a callback has failed (only when retries are disabled).   The email will contain the details of the callback content.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public Callback callbacks(CallbackCallbacks callbacks) {
    
    this.callbacks = callbacks;
    return this;
  }

   /**
   * Get callbacks
   * @return callbacks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CallbackCallbacks getCallbacks() {
    return callbacks;
  }


  public void setCallbacks(CallbackCallbacks callbacks) {
    this.callbacks = callbacks;
  }


   /**
   * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.")

  public List<LinkInner> getLink() {
    return link;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Callback callback = (Callback) o;
    return Objects.equals(this.id, callback.id) &&
        Objects.equals(this.name, callback.name) &&
        Objects.equals(this.url, callback.url) &&
        Objects.equals(this.auth, callback.auth) &&
        Objects.equals(this.contentType, callback.contentType) &&
        Objects.equals(this.removeHTML, callback.removeHTML) &&
        Objects.equals(this.retriesEnabled, callback.retriesEnabled) &&
        Objects.equals(this.email, callback.email) &&
        Objects.equals(this.callbacks, callback.callbacks) &&
        Objects.equals(this.link, callback.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, url, auth, contentType, removeHTML, retriesEnabled, email, callbacks, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Callback {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    removeHTML: ").append(toIndentedString(removeHTML)).append("\n");
    sb.append("    retriesEnabled: ").append(toIndentedString(retriesEnabled)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    callbacks: ").append(toIndentedString(callbacks)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("auth");
    openapiFields.add("contentType");
    openapiFields.add("removeHTML");
    openapiFields.add("retriesEnabled");
    openapiFields.add("email");
    openapiFields.add("callbacks");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("auth");
    openapiRequiredFields.add("contentType");
    openapiRequiredFields.add("removeHTML");
    openapiRequiredFields.add("retriesEnabled");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("callbacks");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Callback
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Callback.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Callback is not found in the empty JSON string", Callback.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Callback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Callback` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Callback.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `auth`
      if (jsonObj.getAsJsonObject("auth") != null) {
        CallbackAuth.validateJsonObject(jsonObj.getAsJsonObject("auth"));
      }
      if (jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if (jsonObj.get("removeHTML") != null && !jsonObj.get("removeHTML").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeHTML` to be a primitive type in the JSON string but got `%s`", jsonObj.get("removeHTML").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `callbacks`
      if (jsonObj.getAsJsonObject("callbacks") != null) {
        CallbackCallbacks.validateJsonObject(jsonObj.getAsJsonObject("callbacks"));
      }
      JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
      if (jsonArraylink != null) {
        // ensure the json data is an array
        if (!jsonObj.get("link").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
        }

        // validate the optional field `link` (array)
        for (int i = 0; i < jsonArraylink.size(); i++) {
          LinkInner.validateJsonObject(jsonArraylink.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Callback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Callback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Callback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Callback.class));

       return (TypeAdapter<T>) new TypeAdapter<Callback>() {
           @Override
           public void write(JsonWriter out, Callback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Callback read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Callback given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Callback
  * @throws IOException if the JSON string is invalid with respect to Callback
  */
  public static Callback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Callback.class);
  }

 /**
  * Convert an instance of Callback to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

