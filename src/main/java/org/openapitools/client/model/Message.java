/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Dlr;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Features;
import org.openapitools.client.model.LinkInner;
import org.openapitools.client.model.Resource;
import org.openapitools.client.model.Social;
import org.openapitools.client.model.Voice;
import org.openapitools.client.model.Web;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * Whispir has a maximum API request payload size of 10MB. Whispir will reject the request if the payload is any bigger. This payload size limit should be adhered to when creatin the message payload. 
 */
@ApiModel(description = "Whispir has a maximum API request payload size of 10MB. Whispir will reject the request if the payload is any bigger. This payload size limit should be adhered to when creatin the message payload. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T01:55:16.197234Z[Etc/UTC]")
public class Message {
  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Email email;

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private Voice voice;

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private Web web;

  public static final String SERIALIZED_NAME_SOCIAL = "social";
  @SerializedName(SERIALIZED_NAME_SOCIAL)
  private Social social;

  /**
   * Allows the user to modify the message behaviour for replies and DLRs (delivery receipts).  - &#x60;defaultNoReply&#x60;: Used to reject any replies to this message. - &#x60;noDlr&#x60;: Used to specify that DLRs should not be enabled for this message.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DEFAULT("default"),
    
    DEFAULTNOREPLY("defaultNoReply"),
    
    NODLR("noDlr");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.DEFAULT;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private Features features;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private Resource resource;

  public static final String SERIALIZED_NAME_MESSAGE_TEMPLATE_ID = "messageTemplateId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEMPLATE_ID)
  private String messageTemplateId;

  public static final String SERIALIZED_NAME_MESSAGE_TEMPLATE_NAME = "messageTemplateName";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEMPLATE_NAME)
  private String messageTemplateName;

  public static final String SERIALIZED_NAME_CALLBACK_ID = "callbackId";
  @SerializedName(SERIALIZED_NAME_CALLBACK_ID)
  private String callbackId;

  public static final String SERIALIZED_NAME_CALLBACK_PARAMETERS = "callbackParameters";
  @SerializedName(SERIALIZED_NAME_CALLBACK_PARAMETERS)
  private Object callbackParameters;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  /**
   * The type of message, used to enable message scheduling.
   */
  @JsonAdapter(MessageTypeEnum.Adapter.class)
  public enum MessageTypeEnum {
    SCHEDULED("SCHEDULED");

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageTypeEnum fromValue(String value) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageTypeEnum messageType;

  /**
   * The schedule type, used to enable single or repeated message scheduling.
   */
  @JsonAdapter(ScheduleTypeEnum.Adapter.class)
  public enum ScheduleTypeEnum {
    ONCE("ONCE"),
    
    REPEAT("REPEAT");

    private String value;

    ScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleTypeEnum fromValue(String value) {
      for (ScheduleTypeEnum b : ScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ScheduleTypeEnum scheduleType;

  public static final String SERIALIZED_NAME_SCHEDULE_DATE = "scheduleDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_DATE)
  private String scheduleDate;

  public static final String SERIALIZED_NAME_REPETITION_COUNT = "repetitionCount";
  @SerializedName(SERIALIZED_NAME_REPETITION_COUNT)
  private BigDecimal repetitionCount = new BigDecimal("1");

  public static final String SERIALIZED_NAME_REPEAT_DAYS = "repeatDays";
  @SerializedName(SERIALIZED_NAME_REPEAT_DAYS)
  private BigDecimal repeatDays;

  public static final String SERIALIZED_NAME_REPEAT_HRS = "repeatHrs";
  @SerializedName(SERIALIZED_NAME_REPEAT_HRS)
  private BigDecimal repeatHrs;

  public static final String SERIALIZED_NAME_REPEAT_MIN = "repeatMin";
  @SerializedName(SERIALIZED_NAME_REPEAT_MIN)
  private BigDecimal repeatMin;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  /**
   * The direction of the sent message.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    OUTGOING("OUTGOING");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_RESPONSE_COUNT = "responseCount";
  @SerializedName(SERIALIZED_NAME_RESPONSE_COUNT)
  private String responseCount;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private BigDecimal createdTime;

  public static final String SERIALIZED_NAME_WHATSAPP_VALID_MESSAGE = "whatsappValidMessage";
  @SerializedName(SERIALIZED_NAME_WHATSAPP_VALID_MESSAGE)
  private Boolean whatsappValidMessage;

  public static final String SERIALIZED_NAME_VALID_BODY = "validBody";
  @SerializedName(SERIALIZED_NAME_VALID_BODY)
  private Boolean validBody;

  public static final String SERIALIZED_NAME_VALID_SUBJECT = "validSubject";
  @SerializedName(SERIALIZED_NAME_VALID_SUBJECT)
  private Boolean validSubject;

  public static final String SERIALIZED_NAME_DLR = "dlr";
  @SerializedName(SERIALIZED_NAME_DLR)
  private Dlr dlr;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<LinkInner> link = null;

  public Message() { 
  }

  
  public Message(
     String from, 
     DirectionEnum direction, 
     String responseCount, 
     BigDecimal createdTime, 
     Boolean whatsappValidMessage, 
     Boolean validBody, 
     Boolean validSubject, 
     List<LinkInner> link
  ) {
    this();
    this.from = from;
    this.direction = direction;
    this.responseCount = responseCount;
    this.createdTime = createdTime;
    this.whatsappValidMessage = whatsappValidMessage;
    this.validBody = validBody;
    this.validSubject = validSubject;
    this.link = link;
  }

  public Message to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Allows a combination of phone numbers, email address, Whispir Contact MRIs, User MRI, Distribution List MRI, separated by &#x60;,&#x60;.  Whispir will pick the relevant recipients based on the channels provided in the request payload  (including template information).  The maximum payload size rule applies.  When used for bulk messages, this field is optional, as bulk messages has another model to specify the &#x60;to&#x60; field recipients. 
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "61400400400", required = true, value = "Allows a combination of phone numbers, email address, Whispir Contact MRIs, User MRI, Distribution List MRI, separated by `,`.  Whispir will pick the relevant recipients based on the channels provided in the request payload  (including template information).  The maximum payload size rule applies.  When used for bulk messages, this field is optional, as bulk messages has another model to specify the `to` field recipients. ")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public Message subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * The message subject. This is common for both SMS and Email channels.  Read &#x60;body&#x60; notes on limits.  The maximum payload size rule applies.  When used for templates, this field is optional.
   * @return subject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Test Message", required = true, value = "The message subject. This is common for both SMS and Email channels.  Read `body` notes on limits.  The maximum payload size rule applies.  When used for templates, this field is optional.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Message body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * The SMS body.  The maximum payload size rule applies.  IMPORTANT: The total SMS length is 1570 characters for english text and 800 when UTF-8 characters are used (primarily non-english)  The 1570 length is a combination of subject and body.
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is the body of my SMS message", value = "The SMS body.  The maximum payload size rule applies.  IMPORTANT: The total SMS length is 1570 characters for english text and 800 when UTF-8 characters are used (primarily non-english)  The 1570 length is a combination of subject and body.")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public Message email(Email email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Email getEmail() {
    return email;
  }


  public void setEmail(Email email) {
    this.email = email;
  }


  public Message voice(Voice voice) {
    
    this.voice = voice;
    return this;
  }

   /**
   * Get voice
   * @return voice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Voice getVoice() {
    return voice;
  }


  public void setVoice(Voice voice) {
    this.voice = voice;
  }


  public Message web(Web web) {
    
    this.web = web;
    return this;
  }

   /**
   * Get web
   * @return web
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Web getWeb() {
    return web;
  }


  public void setWeb(Web web) {
    this.web = web;
  }


  public Message social(Social social) {
    
    this.social = social;
    return this;
  }

   /**
   * Get social
   * @return social
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Social getSocial() {
    return social;
  }


  public void setSocial(Social social) {
    this.social = social;
  }


  public Message type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Allows the user to modify the message behaviour for replies and DLRs (delivery receipts).  - &#x60;defaultNoReply&#x60;: Used to reject any replies to this message. - &#x60;noDlr&#x60;: Used to specify that DLRs should not be enabled for this message.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows the user to modify the message behaviour for replies and DLRs (delivery receipts).  - `defaultNoReply`: Used to reject any replies to this message. - `noDlr`: Used to specify that DLRs should not be enabled for this message.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Message features(Features features) {
    
    this.features = features;
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Features getFeatures() {
    return features;
  }


  public void setFeatures(Features features) {
    this.features = features;
  }


  public Message resource(Resource resource) {
    
    this.resource = resource;
    return this;
  }

   /**
   * Get resource
   * @return resource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Resource getResource() {
    return resource;
  }


  public void setResource(Resource resource) {
    this.resource = resource;
  }


  public Message messageTemplateId(String messageTemplateId) {
    
    this.messageTemplateId = messageTemplateId;
    return this;
  }

   /**
   * The identifier for the Message Template. Specification of this attribute is preferred over the &#x60;messageTemplateName&#x60;, to provide an absolute and non-changing reference to the Message Template.
   * @return messageTemplateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BACEB8D46BEF5315", value = "The identifier for the Message Template. Specification of this attribute is preferred over the `messageTemplateName`, to provide an absolute and non-changing reference to the Message Template.")

  public String getMessageTemplateId() {
    return messageTemplateId;
  }


  public void setMessageTemplateId(String messageTemplateId) {
    this.messageTemplateId = messageTemplateId;
  }


  public Message messageTemplateName(String messageTemplateName) {
    
    this.messageTemplateName = messageTemplateName;
    return this;
  }

   /**
   * A human-readable name for the Message Template.
   * @return messageTemplateName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sample SMS Template", value = "A human-readable name for the Message Template.")

  public String getMessageTemplateName() {
    return messageTemplateName;
  }


  public void setMessageTemplateName(String messageTemplateName) {
    this.messageTemplateName = messageTemplateName;
  }


  public Message callbackId(String callbackId) {
    
    this.callbackId = callbackId;
    return this;
  }

   /**
   * The identifier for the Callback to be invoked on Message delivery events.
   * @return callbackId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myCallbackName", value = "The identifier for the Callback to be invoked on Message delivery events.")

  public String getCallbackId() {
    return callbackId;
  }


  public void setCallbackId(String callbackId) {
    this.callbackId = callbackId;
  }


  public Message callbackParameters(Object callbackParameters) {
    
    this.callbackParameters = callbackParameters;
    return this;
  }

   /**
   * Set of key-value pairs that you can attach to a callback. This can be useful for returning additional information about the object in a structured format.
   * @return callbackParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set of key-value pairs that you can attach to a callback. This can be useful for returning additional information about the object in a structured format.")

  public Object getCallbackParameters() {
    return callbackParameters;
  }


  public void setCallbackParameters(Object callbackParameters) {
    this.callbackParameters = callbackParameters;
  }


  public Message label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * A label to tag the message, useful for grouped viewing and filtering in the UI and via API &#x60;GET /messages?label&#x3D;example&#x60;.  **IMPORTANT**: When this label is used, Whispir Reporting ignores the “Category” labels tied to the messages. Please ensure you are using this as per your business needs and such usage does not affect the reports generated via the \&quot;Category\&quot; grouping.
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sample", value = "A label to tag the message, useful for grouped viewing and filtering in the UI and via API `GET /messages?label=example`.  **IMPORTANT**: When this label is used, Whispir Reporting ignores the “Category” labels tied to the messages. Please ensure you are using this as per your business needs and such usage does not affect the reports generated via the \"Category\" grouping.")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public Message eventId(String eventId) {
    
    this.eventId = eventId;
    return this;
  }

   /**
   * The identifier for the Event to trigger.
   * @return eventId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2EE7FEA3343662BE", value = "The identifier for the Event to trigger.")

  public String getEventId() {
    return eventId;
  }


  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Message messageType(MessageTypeEnum messageType) {
    
    this.messageType = messageType;
    return this;
  }

   /**
   * The type of message, used to enable message scheduling.
   * @return messageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of message, used to enable message scheduling.")

  public MessageTypeEnum getMessageType() {
    return messageType;
  }


  public void setMessageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
  }


  public Message scheduleType(ScheduleTypeEnum scheduleType) {
    
    this.scheduleType = scheduleType;
    return this;
  }

   /**
   * The schedule type, used to enable single or repeated message scheduling.
   * @return scheduleType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The schedule type, used to enable single or repeated message scheduling.")

  public ScheduleTypeEnum getScheduleType() {
    return scheduleType;
  }


  public void setScheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
  }


  public Message scheduleDate(String scheduleDate) {
    
    this.scheduleDate = scheduleDate;
    return this;
  }

   /**
   * For &#x60;ONCE&#x60; scheduled messages, specifies the date to trigger the single delivery. For &#x60;REPEATED&#x60; scheduled messages, the time at which the first of them will be sent.
   * @return scheduleDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14/02/2019 15:55", value = "For `ONCE` scheduled messages, specifies the date to trigger the single delivery. For `REPEATED` scheduled messages, the time at which the first of them will be sent.")

  public String getScheduleDate() {
    return scheduleDate;
  }


  public void setScheduleDate(String scheduleDate) {
    this.scheduleDate = scheduleDate;
  }


  public Message repetitionCount(BigDecimal repetitionCount) {
    
    this.repetitionCount = repetitionCount;
    return this;
  }

   /**
   * Specifies how many times the scheduled message will be sent to the recipient.
   * @return repetitionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Specifies how many times the scheduled message will be sent to the recipient.")

  public BigDecimal getRepetitionCount() {
    return repetitionCount;
  }


  public void setRepetitionCount(BigDecimal repetitionCount) {
    this.repetitionCount = repetitionCount;
  }


  public Message repeatDays(BigDecimal repeatDays) {
    
    this.repeatDays = repeatDays;
    return this;
  }

   /**
   * The interval in days between each scheduled message repetition.
   * @return repeatDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The interval in days between each scheduled message repetition.")

  public BigDecimal getRepeatDays() {
    return repeatDays;
  }


  public void setRepeatDays(BigDecimal repeatDays) {
    this.repeatDays = repeatDays;
  }


  public Message repeatHrs(BigDecimal repeatHrs) {
    
    this.repeatHrs = repeatHrs;
    return this;
  }

   /**
   * The interval in hours between each scheduled message repetition.
   * @return repeatHrs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The interval in hours between each scheduled message repetition.")

  public BigDecimal getRepeatHrs() {
    return repeatHrs;
  }


  public void setRepeatHrs(BigDecimal repeatHrs) {
    this.repeatHrs = repeatHrs;
  }


  public Message repeatMin(BigDecimal repeatMin) {
    
    this.repeatMin = repeatMin;
    return this;
  }

   /**
   * The interval in minutes between each scheduled message repetition.
   * @return repeatMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "The interval in minutes between each scheduled message repetition.")

  public BigDecimal getRepeatMin() {
    return repeatMin;
  }


  public void setRepeatMin(BigDecimal repeatMin) {
    this.repeatMin = repeatMin;
  }


   /**
   * The message sender&#39;s Whispir User MRI.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "testUser@User.whispir.com", value = "The message sender's Whispir User MRI.")

  public String getFrom() {
    return from;
  }




   /**
   * The direction of the sent message.
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The direction of the sent message.")

  public DirectionEnum getDirection() {
    return direction;
  }




   /**
   * Details the responses received for the sent message across all channels. Refer to &#x60;/messageresponses&#x60; to get the detailed response data.
   * @return responseCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Details the responses received for the sent message across all channels. Refer to `/messageresponses` to get the detailed response data.")

  public String getResponseCount() {
    return responseCount;
  }




   /**
   * Epoch time (refers to Unix TimeStamp format starting Jan 1, 1970) denoting the time the message was sent. For bulk messages and messages with multiple recipients this value is tied to the timestamp when the message was received and processed by Whispir.
   * @return createdTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1647467664000", value = "Epoch time (refers to Unix TimeStamp format starting Jan 1, 1970) denoting the time the message was sent. For bulk messages and messages with multiple recipients this value is tied to the timestamp when the message was received and processed by Whispir.")

  public BigDecimal getCreatedTime() {
    return createdTime;
  }




   /**
   * The validity of the WhatsApp channel message.
   * @return whatsappValidMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The validity of the WhatsApp channel message.")

  public Boolean getWhatsappValidMessage() {
    return whatsappValidMessage;
  }




   /**
   * The validity of the message body.
   * @return validBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The validity of the message body.")

  public Boolean getValidBody() {
    return validBody;
  }




   /**
   * The validity of the message subject.
   * @return validSubject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The validity of the message subject.")

  public Boolean getValidSubject() {
    return validSubject;
  }




  public Message dlr(Dlr dlr) {
    
    this.dlr = dlr;
    return this;
  }

   /**
   * Get dlr
   * @return dlr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Dlr getDlr() {
    return dlr;
  }


  public void setDlr(Dlr dlr) {
    this.dlr = dlr;
  }


   /**
   * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.")

  public List<LinkInner> getLink() {
    return link;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.to, message.to) &&
        Objects.equals(this.subject, message.subject) &&
        Objects.equals(this.body, message.body) &&
        Objects.equals(this.email, message.email) &&
        Objects.equals(this.voice, message.voice) &&
        Objects.equals(this.web, message.web) &&
        Objects.equals(this.social, message.social) &&
        Objects.equals(this.type, message.type) &&
        Objects.equals(this.features, message.features) &&
        Objects.equals(this.resource, message.resource) &&
        Objects.equals(this.messageTemplateId, message.messageTemplateId) &&
        Objects.equals(this.messageTemplateName, message.messageTemplateName) &&
        Objects.equals(this.callbackId, message.callbackId) &&
        Objects.equals(this.callbackParameters, message.callbackParameters) &&
        Objects.equals(this.label, message.label) &&
        Objects.equals(this.eventId, message.eventId) &&
        Objects.equals(this.messageType, message.messageType) &&
        Objects.equals(this.scheduleType, message.scheduleType) &&
        Objects.equals(this.scheduleDate, message.scheduleDate) &&
        Objects.equals(this.repetitionCount, message.repetitionCount) &&
        Objects.equals(this.repeatDays, message.repeatDays) &&
        Objects.equals(this.repeatHrs, message.repeatHrs) &&
        Objects.equals(this.repeatMin, message.repeatMin) &&
        Objects.equals(this.from, message.from) &&
        Objects.equals(this.direction, message.direction) &&
        Objects.equals(this.responseCount, message.responseCount) &&
        Objects.equals(this.createdTime, message.createdTime) &&
        Objects.equals(this.whatsappValidMessage, message.whatsappValidMessage) &&
        Objects.equals(this.validBody, message.validBody) &&
        Objects.equals(this.validSubject, message.validSubject) &&
        Objects.equals(this.dlr, message.dlr) &&
        Objects.equals(this.link, message.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, subject, body, email, voice, web, social, type, features, resource, messageTemplateId, messageTemplateName, callbackId, callbackParameters, label, eventId, messageType, scheduleType, scheduleDate, repetitionCount, repeatDays, repeatHrs, repeatMin, from, direction, responseCount, createdTime, whatsappValidMessage, validBody, validSubject, dlr, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("    social: ").append(toIndentedString(social)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    messageTemplateId: ").append(toIndentedString(messageTemplateId)).append("\n");
    sb.append("    messageTemplateName: ").append(toIndentedString(messageTemplateName)).append("\n");
    sb.append("    callbackId: ").append(toIndentedString(callbackId)).append("\n");
    sb.append("    callbackParameters: ").append(toIndentedString(callbackParameters)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    scheduleDate: ").append(toIndentedString(scheduleDate)).append("\n");
    sb.append("    repetitionCount: ").append(toIndentedString(repetitionCount)).append("\n");
    sb.append("    repeatDays: ").append(toIndentedString(repeatDays)).append("\n");
    sb.append("    repeatHrs: ").append(toIndentedString(repeatHrs)).append("\n");
    sb.append("    repeatMin: ").append(toIndentedString(repeatMin)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    responseCount: ").append(toIndentedString(responseCount)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    whatsappValidMessage: ").append(toIndentedString(whatsappValidMessage)).append("\n");
    sb.append("    validBody: ").append(toIndentedString(validBody)).append("\n");
    sb.append("    validSubject: ").append(toIndentedString(validSubject)).append("\n");
    sb.append("    dlr: ").append(toIndentedString(dlr)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("to");
    openapiFields.add("subject");
    openapiFields.add("body");
    openapiFields.add("email");
    openapiFields.add("voice");
    openapiFields.add("web");
    openapiFields.add("social");
    openapiFields.add("type");
    openapiFields.add("features");
    openapiFields.add("resource");
    openapiFields.add("messageTemplateId");
    openapiFields.add("messageTemplateName");
    openapiFields.add("callbackId");
    openapiFields.add("callbackParameters");
    openapiFields.add("label");
    openapiFields.add("eventId");
    openapiFields.add("messageType");
    openapiFields.add("scheduleType");
    openapiFields.add("scheduleDate");
    openapiFields.add("repetitionCount");
    openapiFields.add("repeatDays");
    openapiFields.add("repeatHrs");
    openapiFields.add("repeatMin");
    openapiFields.add("from");
    openapiFields.add("direction");
    openapiFields.add("responseCount");
    openapiFields.add("createdTime");
    openapiFields.add("whatsappValidMessage");
    openapiFields.add("validBody");
    openapiFields.add("validSubject");
    openapiFields.add("dlr");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("subject");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Message
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Message.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Message.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `email`
      if (jsonObj.getAsJsonObject("email") != null) {
        Email.validateJsonObject(jsonObj.getAsJsonObject("email"));
      }
      // validate the optional field `voice`
      if (jsonObj.getAsJsonObject("voice") != null) {
        Voice.validateJsonObject(jsonObj.getAsJsonObject("voice"));
      }
      // validate the optional field `web`
      if (jsonObj.getAsJsonObject("web") != null) {
        Web.validateJsonObject(jsonObj.getAsJsonObject("web"));
      }
      // validate the optional field `social`
      if (jsonObj.getAsJsonObject("social") != null) {
        Social.validateJsonObject(jsonObj.getAsJsonObject("social"));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `features`
      if (jsonObj.getAsJsonObject("features") != null) {
        Features.validateJsonObject(jsonObj.getAsJsonObject("features"));
      }
      // validate the optional field `resource`
      if (jsonObj.getAsJsonObject("resource") != null) {
        Resource.validateJsonObject(jsonObj.getAsJsonObject("resource"));
      }
      if (jsonObj.get("messageTemplateId") != null && !jsonObj.get("messageTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageTemplateId").toString()));
      }
      if (jsonObj.get("messageTemplateName") != null && !jsonObj.get("messageTemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageTemplateName").toString()));
      }
      if (jsonObj.get("callbackId") != null && !jsonObj.get("callbackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackId").toString()));
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if (jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      if (jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleType").toString()));
      }
      if (jsonObj.get("scheduleDate") != null && !jsonObj.get("scheduleDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleDate").toString()));
      }
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if (jsonObj.get("responseCount") != null && !jsonObj.get("responseCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseCount").toString()));
      }
      // validate the optional field `dlr`
      if (jsonObj.getAsJsonObject("dlr") != null) {
        Dlr.validateJsonObject(jsonObj.getAsJsonObject("dlr"));
      }
      JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
      if (jsonArraylink != null) {
        // ensure the json data is an array
        if (!jsonObj.get("link").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
        }

        // validate the optional field `link` (array)
        for (int i = 0; i < jsonArraylink.size(); i++) {
          LinkInner.validateJsonObject(jsonArraylink.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Message given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Message
  * @throws IOException if the JSON string is invalid with respect to Message
  */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

 /**
  * Convert an instance of Message to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

