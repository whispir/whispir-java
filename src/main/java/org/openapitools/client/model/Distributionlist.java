/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DistributionlistDistlistdetailsInner;
import org.openapitools.client.model.LinkInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * Static Distribution Lists are manually managed and maintained. They can include Contacts, Users and other Distribution Lists
 */
@ApiModel(description = "Static Distribution Lists are manually managed and maintained. They can include Contacts, Users and other Distribution Lists")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-22T09:38:29.014059Z[Etc/UTC]")
public class Distributionlist {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MRI = "mri";
  @SerializedName(SERIALIZED_NAME_MRI)
  private String mri;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "memberCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private String memberCount;

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private String access;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<LinkInner> link = null;

  public static final String SERIALIZED_NAME_CONTACT_IDS = "contactIds";
  @SerializedName(SERIALIZED_NAME_CONTACT_IDS)
  private String contactIds;

  public static final String SERIALIZED_NAME_USER_IDS = "userIds";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private String userIds;

  public static final String SERIALIZED_NAME_DIST_LIST_IDS = "distListIds";
  @SerializedName(SERIALIZED_NAME_DIST_LIST_IDS)
  private String distListIds;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type = "static";

  public static final String SERIALIZED_NAME_DISTLISTDETAILS = "distlistdetails";
  @SerializedName(SERIALIZED_NAME_DISTLISTDETAILS)
  private List<DistributionlistDistlistdetailsInner> distlistdetails = null;

  public Distributionlist() { 
  }

  
  public Distributionlist(
     String id, 
     String mri, 
     List<LinkInner> link, 
     List<DistributionlistDistlistdetailsInner> distlistdetails
  ) {
    this();
    this.id = id;
    this.mri = mri;
    this.link = link;
    this.distlistdetails = distlistdetails;
  }

   /**
   * ID of the distribution list 
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5AFEB61102963D7", value = "ID of the distribution list ")

  public String getId() {
    return id;
  }




  public Distributionlist name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specifies the name of the distribution list. This has to be unique, and should not contain any special characters (except spaces) in it
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "My Distribution List", required = true, value = "Specifies the name of the distribution list. This has to be unique, and should not contain any special characters (except spaces) in it")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


   /**
   * Specifies the Message Resource Identifier of the Distribution List in Whispir
   * @return mri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My_Distribution_List.company_name@list.company.whispir.sg", value = "Specifies the Message Resource Identifier of the Distribution List in Whispir")

  public String getMri() {
    return mri;
  }




  public Distributionlist description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Specifies a description for other users to see what this distribution list should be used for.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Distribution list", value = "Specifies a description for other users to see what this distribution list should be used for.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Distributionlist memberCount(String memberCount) {
    
    this.memberCount = memberCount;
    return this;
  }

   /**
   * Total number of contacts in a Distribution List
   * @return memberCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "Total number of contacts in a Distribution List")

  public String getMemberCount() {
    return memberCount;
  }


  public void setMemberCount(String memberCount) {
    this.memberCount = memberCount;
  }


  public Distributionlist access(String access) {
    
    this.access = access;
    return this;
  }

   /**
   * Allows you to specify the access type for this DL  - Open: anyone can subscribe to this distribution list via the Whispir Contact Portal - ByApproval: anyone can subscribe using the Whispir Contact Portal. However, they are not officially on the list until their access is approved - Restricted: the distribution list is not visible in the Whispir Contact Portal
   * @return access
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Open", value = "Allows you to specify the access type for this DL  - Open: anyone can subscribe to this distribution list via the Whispir Contact Portal - ByApproval: anyone can subscribe using the Whispir Contact Portal. However, they are not officially on the list until their access is approved - Restricted: the distribution list is not visible in the Whispir Contact Portal")

  public String getAccess() {
    return access;
  }


  public void setAccess(String access) {
    this.access = access;
  }


  public Distributionlist visibility(String visibility) {
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Allows you to specify the visibility for this DL  - Public: Any user or active contact in any workspace can map themselves to this DL in the Whispir Contact Portal - Private: Only users or active contacts in the current workspace can map themselves to this DL
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Public", value = "Allows you to specify the visibility for this DL  - Public: Any user or active contact in any workspace can map themselves to this DL in the Whispir Contact Portal - Private: Only users or active contacts in the current workspace can map themselves to this DL")

  public String getVisibility() {
    return visibility;
  }


  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


   /**
   * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.")

  public List<LinkInner> getLink() {
    return link;
  }




  public Distributionlist contactIds(String contactIds) {
    
    this.contactIds = contactIds;
    return this;
  }

   /**
   * Comma separated list of Contacts to be associated to this DL. This information can be provided at the time of the DL creation or updated later via a PUT request
   * @return contactIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3A21DCC420494A48", value = "Comma separated list of Contacts to be associated to this DL. This information can be provided at the time of the DL creation or updated later via a PUT request")

  public String getContactIds() {
    return contactIds;
  }


  public void setContactIds(String contactIds) {
    this.contactIds = contactIds;
  }


  public Distributionlist userIds(String userIds) {
    
    this.userIds = userIds;
    return this;
  }

   /**
   * Comma separated list of userIds who can manage this DL. This information can be provided at the time of the DL creation or also later updated via a PUT request
   * @return userIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3A21DCC420494A48", value = "Comma separated list of userIds who can manage this DL. This information can be provided at the time of the DL creation or also later updated via a PUT request")

  public String getUserIds() {
    return userIds;
  }


  public void setUserIds(String userIds) {
    this.userIds = userIds;
  }


  public Distributionlist distListIds(String distListIds) {
    
    this.distListIds = distListIds;
    return this;
  }

   /**
   * Comma separated list of Distribution List IDs that can be nested under this DL. This information can be provided at the time of the DL creation or later updated via a PUT request
   * @return distListIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3A21DCC420494A48, 07172DC9AC3E97A75B5A41536C132CA0", value = "Comma separated list of Distribution List IDs that can be nested under this DL. This information can be provided at the time of the DL creation or later updated via a PUT request")

  public String getDistListIds() {
    return distListIds;
  }


  public void setDistListIds(String distListIds) {
    this.distListIds = distListIds;
  }


  public Distributionlist type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Allows you to specify the type for this DL  - Static: The contacts on the list don’t change unless you manually add or remove them (unlike a dynamic DL)  NOTE: \&quot;static\&quot; is also the default value for this parameter when this field is omitted
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "static", value = "Allows you to specify the type for this DL  - Static: The contacts on the list don’t change unless you manually add or remove them (unlike a dynamic DL)  NOTE: \"static\" is also the default value for this parameter when this field is omitted")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


   /**
   * Details of Contacts included in the Distribution List
   * @return distlistdetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of Contacts included in the Distribution List")

  public List<DistributionlistDistlistdetailsInner> getDistlistdetails() {
    return distlistdetails;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Distributionlist distributionlist = (Distributionlist) o;
    return Objects.equals(this.id, distributionlist.id) &&
        Objects.equals(this.name, distributionlist.name) &&
        Objects.equals(this.mri, distributionlist.mri) &&
        Objects.equals(this.description, distributionlist.description) &&
        Objects.equals(this.memberCount, distributionlist.memberCount) &&
        Objects.equals(this.access, distributionlist.access) &&
        Objects.equals(this.visibility, distributionlist.visibility) &&
        Objects.equals(this.link, distributionlist.link) &&
        Objects.equals(this.contactIds, distributionlist.contactIds) &&
        Objects.equals(this.userIds, distributionlist.userIds) &&
        Objects.equals(this.distListIds, distributionlist.distListIds) &&
        Objects.equals(this.type, distributionlist.type) &&
        Objects.equals(this.distlistdetails, distributionlist.distlistdetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, mri, description, memberCount, access, visibility, link, contactIds, userIds, distListIds, type, distlistdetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Distributionlist {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mri: ").append(toIndentedString(mri)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    contactIds: ").append(toIndentedString(contactIds)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("    distListIds: ").append(toIndentedString(distListIds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    distlistdetails: ").append(toIndentedString(distlistdetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("mri");
    openapiFields.add("description");
    openapiFields.add("memberCount");
    openapiFields.add("access");
    openapiFields.add("visibility");
    openapiFields.add("link");
    openapiFields.add("contactIds");
    openapiFields.add("userIds");
    openapiFields.add("distListIds");
    openapiFields.add("type");
    openapiFields.add("distlistdetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Distributionlist
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Distributionlist.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Distributionlist is not found in the empty JSON string", Distributionlist.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Distributionlist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Distributionlist` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Distributionlist.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("mri") != null && !jsonObj.get("mri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mri").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("memberCount") != null && !jsonObj.get("memberCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberCount").toString()));
      }
      if (jsonObj.get("access") != null && !jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
      if (jsonArraylink != null) {
        // ensure the json data is an array
        if (!jsonObj.get("link").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
        }

        // validate the optional field `link` (array)
        for (int i = 0; i < jsonArraylink.size(); i++) {
          LinkInner.validateJsonObject(jsonArraylink.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("contactIds") != null && !jsonObj.get("contactIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactIds").toString()));
      }
      if (jsonObj.get("userIds") != null && !jsonObj.get("userIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIds").toString()));
      }
      if (jsonObj.get("distListIds") != null && !jsonObj.get("distListIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distListIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distListIds").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      JsonArray jsonArraydistlistdetails = jsonObj.getAsJsonArray("distlistdetails");
      if (jsonArraydistlistdetails != null) {
        // ensure the json data is an array
        if (!jsonObj.get("distlistdetails").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `distlistdetails` to be an array in the JSON string but got `%s`", jsonObj.get("distlistdetails").toString()));
        }

        // validate the optional field `distlistdetails` (array)
        for (int i = 0; i < jsonArraydistlistdetails.size(); i++) {
          DistributionlistDistlistdetailsInner.validateJsonObject(jsonArraydistlistdetails.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Distributionlist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Distributionlist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Distributionlist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Distributionlist.class));

       return (TypeAdapter<T>) new TypeAdapter<Distributionlist>() {
           @Override
           public void write(JsonWriter out, Distributionlist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Distributionlist read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Distributionlist given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Distributionlist
  * @throws IOException if the JSON string is invalid with respect to Distributionlist
  */
  public static Distributionlist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Distributionlist.class);
  }

 /**
  * Convert an instance of Distributionlist to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

