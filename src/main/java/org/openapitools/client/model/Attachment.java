/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * Attachments can be of any type [e.g. PDF, images and documents], and the maximum size of all attached files combined is 10 MB  Attachments must be provided in the payload of the message. URLs can be referenced in the email but will not be added as message attachments.
 */
@ApiModel(description = "Attachments can be of any type [e.g. PDF, images and documents], and the maximum size of all attached files combined is 10 MB  Attachments must be provided in the payload of the message. URLs can be referenced in the email but will not be added as message attachments.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T00:42:12.980940Z[Etc/UTC]")
public class Attachment {
  public static final String SERIALIZED_NAME_ATTACHMENT_NAME = "attachmentName";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_NAME)
  private String attachmentName;

  public static final String SERIALIZED_NAME_DEREF_URI = "derefUri";
  @SerializedName(SERIALIZED_NAME_DEREF_URI)
  private String derefUri;

  public static final String SERIALIZED_NAME_ATTACHMENT_DESC = "attachmentDesc";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_DESC)
  private String attachmentDesc;

  public Attachment() { 
  }

  public Attachment attachmentName(String attachmentName) {
    
    this.attachmentName = attachmentName;
    return this;
  }

   /**
   * The name of the attachment, including the extension.
   * @return attachmentName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "TestIcon.png", required = true, value = "The name of the attachment, including the extension.")

  public String getAttachmentName() {
    return attachmentName;
  }


  public void setAttachmentName(String attachmentName) {
    this.attachmentName = attachmentName;
  }


  public Attachment derefUri(String derefUri) {
    
    this.derefUri = derefUri;
    return this;
  }

   /**
   * The Base64 encoded value for the email attachment.
   * @return derefUri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==", required = true, value = "The Base64 encoded value for the email attachment.")

  public String getDerefUri() {
    return derefUri;
  }


  public void setDerefUri(String derefUri) {
    this.derefUri = derefUri;
  }


  public Attachment attachmentDesc(String attachmentDesc) {
    
    this.attachmentDesc = attachmentDesc;
    return this;
  }

   /**
   * A description for the attachment.
   * @return attachmentDesc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My photo", value = "A description for the attachment.")

  public String getAttachmentDesc() {
    return attachmentDesc;
  }


  public void setAttachmentDesc(String attachmentDesc) {
    this.attachmentDesc = attachmentDesc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attachment attachment = (Attachment) o;
    return Objects.equals(this.attachmentName, attachment.attachmentName) &&
        Objects.equals(this.derefUri, attachment.derefUri) &&
        Objects.equals(this.attachmentDesc, attachment.attachmentDesc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentName, derefUri, attachmentDesc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attachment {\n");
    sb.append("    attachmentName: ").append(toIndentedString(attachmentName)).append("\n");
    sb.append("    derefUri: ").append(toIndentedString(derefUri)).append("\n");
    sb.append("    attachmentDesc: ").append(toIndentedString(attachmentDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachmentName");
    openapiFields.add("derefUri");
    openapiFields.add("attachmentDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attachmentName");
    openapiRequiredFields.add("derefUri");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Attachment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Attachment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attachment is not found in the empty JSON string", Attachment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Attachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attachment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Attachment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("attachmentName") != null && !jsonObj.get("attachmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachmentName").toString()));
      }
      if (jsonObj.get("derefUri") != null && !jsonObj.get("derefUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derefUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derefUri").toString()));
      }
      if (jsonObj.get("attachmentDesc") != null && !jsonObj.get("attachmentDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachmentDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attachment.class));

       return (TypeAdapter<T>) new TypeAdapter<Attachment>() {
           @Override
           public void write(JsonWriter out, Attachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attachment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Attachment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Attachment
  * @throws IOException if the JSON string is invalid with respect to Attachment
  */
  public static Attachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attachment.class);
  }

 /**
  * Convert an instance of Attachment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

