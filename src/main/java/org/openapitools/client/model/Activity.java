/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.LinkInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * Activities are all the individual changes, tasks, calls, messages and so on performed in a given company workspace.
 */
@ApiModel(description = "Activities are all the individual changes, tasks, calls, messages and so on performed in a given company workspace.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-22T09:15:03.121580Z[Etc/UTC]")
public class Activity {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  /**
   * Specifies the action performed during this activity.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    CREATE("Create"),
    
    UPDATE("Update"),
    
    MOVE("Move"),
    
    COPY("Copy"),
    
    DRAFT("Draft"),
    
    SEND("Send"),
    
    MODIFIED("Modified"),
    
    DELETE("Delete"),
    
    CONTACT_IMPORT_FILE("Contact Import File"),
    
    LOGIN("Login"),
    
    APPROVE("Approve"),
    
    REJECT("Reject"),
    
    DISPATCH("Dispatch"),
    
    REGISTER("Register"),
    
    ACCEPT("Accept"),
    
    CLOSED("Closed"),
    
    MAP("Map"),
    
    UN_MAP("Un-map"),
    
    LOGOUT("Logout");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  /**
   * Specifies the module to which this activity belongs to.
   */
  @JsonAdapter(ModuleEnum.Adapter.class)
  public enum ModuleEnum {
    SYSTEM("System"),
    
    MESSAGE("Message"),
    
    SCHEDULED_MESSAGE("Scheduled Message"),
    
    USER("User"),
    
    CONTACT("Contact"),
    
    DISTRIBUTION_LIST("Distribution List"),
    
    TEMPLATE("Template"),
    
    WORKSPACE("Workspace"),
    
    EVENT("Event"),
    
    WEBSERVICE("WebService"),
    
    SETTINGS("Settings"),
    
    CONVERSATION("Conversation"),
    
    GATEWAY("Gateway"),
    
    WORKSPACE_MAPPING("Workspace Mapping"),
    
    FOLDERS("Folders"),
    
    TEAM("Team"),
    
    RSS("RSS"),
    
    API_MAPPING("API Mapping"),
    
    ASSET("Asset"),
    
    INSTRUCTION("Instruction");

    private String value;

    ModuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModuleEnum fromValue(String value) {
      for (ModuleEnum b : ModuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModuleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private ModuleEnum module;

  public static final String SERIALIZED_NAME_WORKSPACE_NAME = "workspaceName";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_NAME)
  private String workspaceName;

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<LinkInner> link = null;

  public Activity() { 
  }

  
  public Activity(
     List<LinkInner> link
  ) {
    this();
    this.link = link;
  }

  public Activity user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   *  The username of the person who performed this activity. This will usually be the API user invoking the creation.
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "whispir user", value = " The username of the person who performed this activity. This will usually be the API user invoking the creation.")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public Activity time(String time) {
    
    this.time = time;
    return this;
  }

   /**
   * The date and time of the activity in the format:dd/mm/yy hh:mm. This will be defaulted to the time at which this activity is created.
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "03/08/22 15:17", value = "The date and time of the activity in the format:dd/mm/yy hh:mm. This will be defaulted to the time at which this activity is created.")

  public String getTime() {
    return time;
  }


  public void setTime(String time) {
    this.time = time;
  }


  public Activity action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Specifies the action performed during this activity.
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Create", value = "Specifies the action performed during this activity.")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public Activity description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the activity. This is a free text that details about the activity.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Logged out", value = "The description of the activity. This is a free text that details about the activity.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Activity status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Specifies the status of the activity.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Successful", value = "Specifies the status of the activity.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public Activity module(ModuleEnum module) {
    
    this.module = module;
    return this;
  }

   /**
   * Specifies the module to which this activity belongs to.
   * @return module
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Conversation", value = "Specifies the module to which this activity belongs to.")

  public ModuleEnum getModule() {
    return module;
  }


  public void setModule(ModuleEnum module) {
    this.module = module;
  }


  public Activity workspaceName(String workspaceName) {
    
    this.workspaceName = workspaceName;
    return this;
  }

   /**
   * The workspace in which this activity is performed. This will usually be the API userâ€™s default workspace
   * @return workspaceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Company", value = "The workspace in which this activity is performed. This will usually be the API userâ€™s default workspace")

  public String getWorkspaceName() {
    return workspaceName;
  }


  public void setWorkspaceName(String workspaceName) {
    this.workspaceName = workspaceName;
  }


  public Activity fullname(String fullname) {
    
    this.fullname = fullname;
    return this;
  }

   /**
   * Fullname of the user
   * @return fullname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Whispir User", value = "Fullname of the user")

  public String getFullname() {
    return fullname;
  }


  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


   /**
   * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.")

  public List<LinkInner> getLink() {
    return link;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.user, activity.user) &&
        Objects.equals(this.time, activity.time) &&
        Objects.equals(this.action, activity.action) &&
        Objects.equals(this.description, activity.description) &&
        Objects.equals(this.status, activity.status) &&
        Objects.equals(this.module, activity.module) &&
        Objects.equals(this.workspaceName, activity.workspaceName) &&
        Objects.equals(this.fullname, activity.fullname) &&
        Objects.equals(this.link, activity.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, time, action, description, status, module, workspaceName, fullname, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    workspaceName: ").append(toIndentedString(workspaceName)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("time");
    openapiFields.add("action");
    openapiFields.add("description");
    openapiFields.add("status");
    openapiFields.add("module");
    openapiFields.add("workspaceName");
    openapiFields.add("fullname");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Activity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Activity.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity is not found in the empty JSON string", Activity.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Activity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if (jsonObj.get("time") != null && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("module") != null && !jsonObj.get("module").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module").toString()));
      }
      if (jsonObj.get("workspaceName") != null && !jsonObj.get("workspaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceName").toString()));
      }
      if (jsonObj.get("fullname") != null && !jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
      if (jsonArraylink != null) {
        // ensure the json data is an array
        if (!jsonObj.get("link").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
        }

        // validate the optional field `link` (array)
        for (int i = 0; i < jsonArraylink.size(); i++) {
          LinkInner.validateJsonObject(jsonArraylink.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity>() {
           @Override
           public void write(JsonWriter out, Activity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Activity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Activity
  * @throws IOException if the JSON string is invalid with respect to Activity
  */
  public static Activity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity.class);
  }

 /**
  * Convert an instance of Activity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

