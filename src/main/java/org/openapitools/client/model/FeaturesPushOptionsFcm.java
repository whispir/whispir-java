/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * The fcm object holds attributes specific to the contacts&#39; Firebase-registered Android devices
 */
@ApiModel(description = "The fcm object holds attributes specific to the contacts' Firebase-registered Android devices")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-22T09:15:03.121580Z[Etc/UTC]")
public class FeaturesPushOptionsFcm {
  public static final String SERIALIZED_NAME_ANDROID_CHANNEL_ID = "androidChannelId";
  @SerializedName(SERIALIZED_NAME_ANDROID_CHANNEL_ID)
  private String androidChannelId;

  public static final String SERIALIZED_NAME_SOUND = "sound";
  @SerializedName(SERIALIZED_NAME_SOUND)
  private String sound;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public FeaturesPushOptionsFcm() { 
  }

  public FeaturesPushOptionsFcm androidChannelId(String androidChannelId) {
    
    this.androidChannelId = androidChannelId;
    return this;
  }

   /**
   * Translates to the &lt;span style&#x3D;\&quot;color:red\&quot;&gt;*android_channel_id*&lt;/span&gt; attribute in FCM. Note: use this attribute for devices running Android versions 8 or later.
   * @return androidChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my_app_notification_channel_id", value = "Translates to the <span style=\"color:red\">*android_channel_id*</span> attribute in FCM. Note: use this attribute for devices running Android versions 8 or later.")

  public String getAndroidChannelId() {
    return androidChannelId;
  }


  public void setAndroidChannelId(String androidChannelId) {
    this.androidChannelId = androidChannelId;
  }


  public FeaturesPushOptionsFcm sound(String sound) {
    
    this.sound = sound;
    return this;
  }

   /**
   * The sound to play when the device receives the notification. The value *default* will play the system sound, otherwise this attribute must point to a sound resource bundled in the app, e.g. *_/res/raw/notification_sound.wav*  Note: This attribute can be used for devices running Android versions older than Android 8. For versions 8+ please use the *androidChannelId*
   * @return sound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/res/raw/notification_sound.wav", value = "The sound to play when the device receives the notification. The value *default* will play the system sound, otherwise this attribute must point to a sound resource bundled in the app, e.g. *_/res/raw/notification_sound.wav*  Note: This attribute can be used for devices running Android versions older than Android 8. For versions 8+ please use the *androidChannelId*")

  public String getSound() {
    return sound;
  }


  public void setSound(String sound) {
    this.sound = sound;
  }


  public FeaturesPushOptionsFcm action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * The action linked with a user click on the notification. Translates to the &lt;span style&#x3D;\&quot;color:red\&quot;&gt;*click_action*&lt;/span&gt; attribute in FCM.
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "campaign_action", value = "The action linked with a user click on the notification. Translates to the <span style=\"color:red\">*click_action*</span> attribute in FCM.")

  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public FeaturesPushOptionsFcm image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * The URL of an image to be downloaded and displayed in the notification.  Details of the Android support for images in push notifications can be found [here](https://firebase.google.com/docs/cloud-messaging/android/send-image)
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mycompany.com/sales/campaign.png", value = "The URL of an image to be downloaded and displayed in the notification.  Details of the Android support for images in push notifications can be found [here](https://firebase.google.com/docs/cloud-messaging/android/send-image)")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeaturesPushOptionsFcm featuresPushOptionsFcm = (FeaturesPushOptionsFcm) o;
    return Objects.equals(this.androidChannelId, featuresPushOptionsFcm.androidChannelId) &&
        Objects.equals(this.sound, featuresPushOptionsFcm.sound) &&
        Objects.equals(this.action, featuresPushOptionsFcm.action) &&
        Objects.equals(this.image, featuresPushOptionsFcm.image);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidChannelId, sound, action, image);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeaturesPushOptionsFcm {\n");
    sb.append("    androidChannelId: ").append(toIndentedString(androidChannelId)).append("\n");
    sb.append("    sound: ").append(toIndentedString(sound)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidChannelId");
    openapiFields.add("sound");
    openapiFields.add("action");
    openapiFields.add("image");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeaturesPushOptionsFcm
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FeaturesPushOptionsFcm.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeaturesPushOptionsFcm is not found in the empty JSON string", FeaturesPushOptionsFcm.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FeaturesPushOptionsFcm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeaturesPushOptionsFcm` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("androidChannelId") != null && !jsonObj.get("androidChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidChannelId").toString()));
      }
      if (jsonObj.get("sound") != null && !jsonObj.get("sound").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sound` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sound").toString()));
      }
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeaturesPushOptionsFcm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeaturesPushOptionsFcm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeaturesPushOptionsFcm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeaturesPushOptionsFcm.class));

       return (TypeAdapter<T>) new TypeAdapter<FeaturesPushOptionsFcm>() {
           @Override
           public void write(JsonWriter out, FeaturesPushOptionsFcm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeaturesPushOptionsFcm read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeaturesPushOptionsFcm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeaturesPushOptionsFcm
  * @throws IOException if the JSON string is invalid with respect to FeaturesPushOptionsFcm
  */
  public static FeaturesPushOptionsFcm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeaturesPushOptionsFcm.class);
  }

 /**
  * Convert an instance of FeaturesPushOptionsFcm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

