/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import whispir_sdk_java.JSON;

/**
 * Mapping the data column in your resource file to the contact field value
 */
@ApiModel(description = "Mapping the data column in your resource file to the contact field value")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T01:55:16.197234Z[Etc/UTC]")
public class FieldMapping {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_WORK_MOBILE_PHONE1 = "workMobilePhone1";
  @SerializedName(SERIALIZED_NAME_WORK_MOBILE_PHONE1)
  private String workMobilePhone1;

  public static final String SERIALIZED_NAME_WORK_COUNTRY = "workCountry";
  @SerializedName(SERIALIZED_NAME_WORK_COUNTRY)
  private String workCountry;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public FieldMapping() { 
  }

  public FieldMapping firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First Name of the Contact. Value of this field is used to map the field within the resource.
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "firstName", required = true, value = "First Name of the Contact. Value of this field is used to map the field within the resource.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public FieldMapping lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last Name of the Contact. Value of this field is used to map the field within the resource.
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "lastName", required = true, value = "Last Name of the Contact. Value of this field is used to map the field within the resource.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public FieldMapping workMobilePhone1(String workMobilePhone1) {
    
    this.workMobilePhone1 = workMobilePhone1;
    return this;
  }

   /**
   * The mobile phone number of the Contact. Value of this field is used to map the field within the newly created resource.
   * @return workMobilePhone1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "workMobilePhone1", required = true, value = "The mobile phone number of the Contact. Value of this field is used to map the field within the newly created resource.")

  public String getWorkMobilePhone1() {
    return workMobilePhone1;
  }


  public void setWorkMobilePhone1(String workMobilePhone1) {
    this.workMobilePhone1 = workMobilePhone1;
  }


  public FieldMapping workCountry(String workCountry) {
    
    this.workCountry = workCountry;
    return this;
  }

   /**
   * The country field of the contact. The value of this field is used to map to the field within the newly created contact.
   * @return workCountry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "workCountry", required = true, value = "The country field of the contact. The value of this field is used to map to the field within the newly created contact.")

  public String getWorkCountry() {
    return workCountry;
  }


  public void setWorkCountry(String workCountry) {
    this.workCountry = workCountry;
  }


  public FieldMapping timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone field of the contact. The value of this field is used to map to the timezone field within the newly created contact.
   * @return timezone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "timeZone", required = true, value = "The timezone field of the contact. The value of this field is used to map to the timezone field within the newly created contact.")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldMapping fieldMapping = (FieldMapping) o;
    return Objects.equals(this.firstName, fieldMapping.firstName) &&
        Objects.equals(this.lastName, fieldMapping.lastName) &&
        Objects.equals(this.workMobilePhone1, fieldMapping.workMobilePhone1) &&
        Objects.equals(this.workCountry, fieldMapping.workCountry) &&
        Objects.equals(this.timezone, fieldMapping.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, workMobilePhone1, workCountry, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldMapping {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    workMobilePhone1: ").append(toIndentedString(workMobilePhone1)).append("\n");
    sb.append("    workCountry: ").append(toIndentedString(workCountry)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("workMobilePhone1");
    openapiFields.add("workCountry");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("workMobilePhone1");
    openapiRequiredFields.add("workCountry");
    openapiRequiredFields.add("timezone");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FieldMapping
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FieldMapping.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldMapping is not found in the empty JSON string", FieldMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FieldMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldMapping` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FieldMapping.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (jsonObj.get("workMobilePhone1") != null && !jsonObj.get("workMobilePhone1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workMobilePhone1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workMobilePhone1").toString()));
      }
      if (jsonObj.get("workCountry") != null && !jsonObj.get("workCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workCountry").toString()));
      }
      if (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldMapping>() {
           @Override
           public void write(JsonWriter out, FieldMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldMapping read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FieldMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FieldMapping
  * @throws IOException if the JSON string is invalid with respect to FieldMapping
  */
  public static FieldMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldMapping.class);
  }

 /**
  * Convert an instance of FieldMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

