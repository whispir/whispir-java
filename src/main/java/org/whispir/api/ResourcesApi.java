/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.whispir.api;

import whispir_sdk_java.ApiCallback;
import whispir_sdk_java.ApiClient;
import whispir_sdk_java.ApiException;
import whispir_sdk_java.ApiResponse;
import whispir_sdk_java.Configuration;
import whispir_sdk_java.Pair;
import whispir_sdk_java.ProgressRequestBody;
import whispir_sdk_java.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetMessages400Response;
import org.openapitools.client.model.GetMessages401Response;
import org.openapitools.client.model.GetMessages403Response;
import org.openapitools.client.model.GetMessages404Response;
import org.openapitools.client.model.GetMessages405Response;
import org.openapitools.client.model.GetMessages415Response;
import org.openapitools.client.model.GetMessages422Response;
import org.openapitools.client.model.GetMessages500Response;
import org.openapitools.client.model.GetMessages501Response;
import org.openapitools.client.model.GetResources200Response;
import org.openapitools.client.model.Resource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteResourcesById
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param resourceId The id of the resources to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcesByIdCall(String workspaceId, String xApiKey, String resourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/resources/{resourceId}"
            .replaceAll("\\{" + "workspaceId" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourcesByIdValidateBeforeCall(String workspaceId, String xApiKey, String resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteResourcesById(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling deleteResourcesById(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResourcesById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResourcesByIdCall(workspaceId, xApiKey, resourceId, _callback);
        return localVarCall;

    }

    /**
     * Delete a resource
     * Resources can be deleted after use. These can be both public and private in scope.    **Note:** Deleting a public resource may result in 404 File Not Found error for any sites or material referencing to it. So, ensure that DELETE is only executed when the reference to all material is removed or the content has to be removed for other purposes immediately. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param resourceId The id of the resources to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public void deleteResourcesById(String workspaceId, String xApiKey, String resourceId) throws ApiException {
        deleteResourcesByIdWithHttpInfo(workspaceId, xApiKey, resourceId);
    }

    /**
     * Delete a resource
     * Resources can be deleted after use. These can be both public and private in scope.    **Note:** Deleting a public resource may result in 404 File Not Found error for any sites or material referencing to it. So, ensure that DELETE is only executed when the reference to all material is removed or the content has to be removed for other purposes immediately. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param resourceId The id of the resources to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteResourcesByIdWithHttpInfo(String workspaceId, String xApiKey, String resourceId) throws ApiException {
        okhttp3.Call localVarCall = deleteResourcesByIdValidateBeforeCall(workspaceId, xApiKey, resourceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a resource (asynchronously)
     * Resources can be deleted after use. These can be both public and private in scope.    **Note:** Deleting a public resource may result in 404 File Not Found error for any sites or material referencing to it. So, ensure that DELETE is only executed when the reference to all material is removed or the content has to be removed for other purposes immediately. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param resourceId The id of the resources to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcesByIdAsync(String workspaceId, String xApiKey, String resourceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourcesByIdValidateBeforeCall(workspaceId, xApiKey, resourceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResources
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param limit The number of records to be returned. (optional, default to 20)
     * @param offset The record number to start returning from. (optional, default to 0)
     * @param sortOrder The order in which you require the results to be returned. Either ‘asc’ or ‘desc’ (optional)
     * @param sortFields The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma. (optional)
     * @param scope A filter parameter for the visibility of the resource. (optional)
     * @param name A filter parameter for the name of the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesCall(String workspaceId, String xApiKey, String accept, BigDecimal limit, BigDecimal offset, String sortOrder, String sortFields, String scope, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/resources"
            .replaceAll("\\{" + "workspaceId" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (sortFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortFields", sortFields));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/vnd.whispir.resource-v1+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesValidateBeforeCall(String workspaceId, String xApiKey, String accept, BigDecimal limit, BigDecimal offset, String sortOrder, String sortFields, String scope, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getResources(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getResources(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getResources(Async)");
        }
        

        okhttp3.Call localVarCall = getResourcesCall(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, scope, name, _callback);
        return localVarCall;

    }

    /**
     * List resources
     * Existing resources can be easily retrieved via the GET /resources API call. The response lists all of the existing public and private resources available in the system.  **name:** String   - Specifies the name of the resource. The name is given during creation.  **scope:** String   - Specifies the permission scope of the file being uploaded.  **mimeType:** String   - The mime type of the file that is being uploaded.  **url:** String   - The downloaded link to the resource location. Browsing this link results in a download of the resource.   - **Note:** Only available for Public scoped resources.  **link:** Array   - Provides a list of URLs that can be used to manipulate or access the message template.   - uri - the link to access the message template   - rel - the descriptor for what the link will do   - method - the HTTP method to use with this particular link  ## Filtering search results  **Note:** when it comes to searching by name, the equal sign must be intended as &#x60;contains&#x60; rather than &#x60;equals&#x60;. So, if we search resources with the value equals to &#x60;in&#x60; we might be given back   **Eg** (&#x60;India.csv&#x60; and &#x60;Indonesia.json&#x60; but also &#x60;Argentina.csv&#x60;)  ### Filtering By scope  Resources can be filtered by their scope. This can be achieved by sending in the required scope type in the URL as query parameter. The scope can be one of the allowed scope types.  *   Public - &amp;scope&#x3D;public *   Private - &amp;scope&#x3D;private  ### Filtering By name  Resources can be filtered by their name. This can be achieved by sending in the name in the URL as query parameter.  **Note:** The name including the file extension makes it a unique search.  **Eg:** - &amp;name&#x3D;australia.csv 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param limit The number of records to be returned. (optional, default to 20)
     * @param offset The record number to start returning from. (optional, default to 0)
     * @param sortOrder The order in which you require the results to be returned. Either ‘asc’ or ‘desc’ (optional)
     * @param sortFields The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma. (optional)
     * @param scope A filter parameter for the visibility of the resource. (optional)
     * @param name A filter parameter for the name of the resource. (optional)
     * @return GetResources200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public GetResources200Response getResources(String workspaceId, String xApiKey, String accept, BigDecimal limit, BigDecimal offset, String sortOrder, String sortFields, String scope, String name) throws ApiException {
        ApiResponse<GetResources200Response> localVarResp = getResourcesWithHttpInfo(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, scope, name);
        return localVarResp.getData();
    }

    /**
     * List resources
     * Existing resources can be easily retrieved via the GET /resources API call. The response lists all of the existing public and private resources available in the system.  **name:** String   - Specifies the name of the resource. The name is given during creation.  **scope:** String   - Specifies the permission scope of the file being uploaded.  **mimeType:** String   - The mime type of the file that is being uploaded.  **url:** String   - The downloaded link to the resource location. Browsing this link results in a download of the resource.   - **Note:** Only available for Public scoped resources.  **link:** Array   - Provides a list of URLs that can be used to manipulate or access the message template.   - uri - the link to access the message template   - rel - the descriptor for what the link will do   - method - the HTTP method to use with this particular link  ## Filtering search results  **Note:** when it comes to searching by name, the equal sign must be intended as &#x60;contains&#x60; rather than &#x60;equals&#x60;. So, if we search resources with the value equals to &#x60;in&#x60; we might be given back   **Eg** (&#x60;India.csv&#x60; and &#x60;Indonesia.json&#x60; but also &#x60;Argentina.csv&#x60;)  ### Filtering By scope  Resources can be filtered by their scope. This can be achieved by sending in the required scope type in the URL as query parameter. The scope can be one of the allowed scope types.  *   Public - &amp;scope&#x3D;public *   Private - &amp;scope&#x3D;private  ### Filtering By name  Resources can be filtered by their name. This can be achieved by sending in the name in the URL as query parameter.  **Note:** The name including the file extension makes it a unique search.  **Eg:** - &amp;name&#x3D;australia.csv 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param limit The number of records to be returned. (optional, default to 20)
     * @param offset The record number to start returning from. (optional, default to 0)
     * @param sortOrder The order in which you require the results to be returned. Either ‘asc’ or ‘desc’ (optional)
     * @param sortFields The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma. (optional)
     * @param scope A filter parameter for the visibility of the resource. (optional)
     * @param name A filter parameter for the name of the resource. (optional)
     * @return ApiResponse&lt;GetResources200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetResources200Response> getResourcesWithHttpInfo(String workspaceId, String xApiKey, String accept, BigDecimal limit, BigDecimal offset, String sortOrder, String sortFields, String scope, String name) throws ApiException {
        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, scope, name, null);
        Type localVarReturnType = new TypeToken<GetResources200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List resources (asynchronously)
     * Existing resources can be easily retrieved via the GET /resources API call. The response lists all of the existing public and private resources available in the system.  **name:** String   - Specifies the name of the resource. The name is given during creation.  **scope:** String   - Specifies the permission scope of the file being uploaded.  **mimeType:** String   - The mime type of the file that is being uploaded.  **url:** String   - The downloaded link to the resource location. Browsing this link results in a download of the resource.   - **Note:** Only available for Public scoped resources.  **link:** Array   - Provides a list of URLs that can be used to manipulate or access the message template.   - uri - the link to access the message template   - rel - the descriptor for what the link will do   - method - the HTTP method to use with this particular link  ## Filtering search results  **Note:** when it comes to searching by name, the equal sign must be intended as &#x60;contains&#x60; rather than &#x60;equals&#x60;. So, if we search resources with the value equals to &#x60;in&#x60; we might be given back   **Eg** (&#x60;India.csv&#x60; and &#x60;Indonesia.json&#x60; but also &#x60;Argentina.csv&#x60;)  ### Filtering By scope  Resources can be filtered by their scope. This can be achieved by sending in the required scope type in the URL as query parameter. The scope can be one of the allowed scope types.  *   Public - &amp;scope&#x3D;public *   Private - &amp;scope&#x3D;private  ### Filtering By name  Resources can be filtered by their name. This can be achieved by sending in the name in the URL as query parameter.  **Note:** The name including the file extension makes it a unique search.  **Eg:** - &amp;name&#x3D;australia.csv 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param limit The number of records to be returned. (optional, default to 20)
     * @param offset The record number to start returning from. (optional, default to 0)
     * @param sortOrder The order in which you require the results to be returned. Either ‘asc’ or ‘desc’ (optional)
     * @param sortFields The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma. (optional)
     * @param scope A filter parameter for the visibility of the resource. (optional)
     * @param name A filter parameter for the name of the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesAsync(String workspaceId, String xApiKey, String accept, BigDecimal limit, BigDecimal offset, String sortOrder, String sortFields, String scope, String name, final ApiCallback<GetResources200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(workspaceId, xApiKey, accept, limit, offset, sortOrder, sortFields, scope, name, _callback);
        Type localVarReturnType = new TypeToken<GetResources200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourcesById
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId The identifier for the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesByIdCall(String workspaceId, String xApiKey, String accept, String resourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/resources/{resourceId}"
            .replaceAll("\\{" + "workspaceId" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/vnd.whispir.resource-v1+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesByIdValidateBeforeCall(String workspaceId, String xApiKey, String accept, String resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getResourcesById(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getResourcesById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getResourcesById(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourcesById(Async)");
        }
        

        okhttp3.Call localVarCall = getResourcesByIdCall(workspaceId, xApiKey, accept, resourceId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a resource
     * A single resource (public|private) can be retrieved from the available resource by using the resource’s specific link uri 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId The identifier for the resource. (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public Resource getResourcesById(String workspaceId, String xApiKey, String accept, String resourceId) throws ApiException {
        ApiResponse<Resource> localVarResp = getResourcesByIdWithHttpInfo(workspaceId, xApiKey, accept, resourceId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a resource
     * A single resource (public|private) can be retrieved from the available resource by using the resource’s specific link uri 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId The identifier for the resource. (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Resource> getResourcesByIdWithHttpInfo(String workspaceId, String xApiKey, String accept, String resourceId) throws ApiException {
        okhttp3.Call localVarCall = getResourcesByIdValidateBeforeCall(workspaceId, xApiKey, accept, resourceId, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a resource (asynchronously)
     * A single resource (public|private) can be retrieved from the available resource by using the resource’s specific link uri 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId The identifier for the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesByIdAsync(String workspaceId, String xApiKey, String accept, String resourceId, final ApiCallback<Resource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesByIdValidateBeforeCall(workspaceId, xApiKey, accept, resourceId, _callback);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postResources
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resource resources object that needs to be create resources (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postResourcesCall(String workspaceId, String xApiKey, String contentType, String accept, Resource resource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/resources"
            .replaceAll("\\{" + "workspaceId" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/vnd.whispir.resource-v1+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.whispir.resource-v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postResourcesValidateBeforeCall(String workspaceId, String xApiKey, String contentType, String accept, Resource resource, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling postResources(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling postResources(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling postResources(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling postResources(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling postResources(Async)");
        }
        

        okhttp3.Call localVarCall = postResourcesCall(workspaceId, xApiKey, contentType, accept, resource, _callback);
        return localVarCall;

    }

    /**
     * Create a resource
     * ### High-Level Response Elements  **name:** String   *   Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name. **Eg:** australia-contacts.csv *   **Note:** It is advised that names should not contain spaces or special characters other than &#x60;-&#x60; and &#x60;.&#x60;. This helps for easier search and also for a valid URL link (especially) in case of public scoped files. *   **Eg:** &#x60;australia-contacts.csv&#x60; is better name convention than &#x60;australia contacts.csv&#x60; as the latter converts into &#x60;australia%20contacts.csv&#x60;.    **scope:** String   Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can be only one between:   *   **Public -** Public files have an addressable URL and are available publicly   *   **Private -** Private files have no URL and are only available for bulk messaging purposes and for importing contacts.  **mimeType:** String   The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.   *   **Public -** Public files can be of any mimetype. &#x60;text/html&#x60;; &#x60;text/csv&#x60;   *   **Private -** Private files are restricted to &#x60;CSV&#x60;, &#x60;JSON&#x60;, and &#x60;XML&#x60;  **derefUri:** The base64 representation of the file being submitted.  **Note:** When creating a resource, the following conditions apply -  *   Maximum of 10MB per file being uploaded. *   Transactions will have an enforced timeout. *   Resources will be available in the Whispir Platform for a limited timeframe (30 days). These will then be automatically cleaned. This will be a configurable setting for Whispir Administrators.  ### Upload the Resource file via API   To upload a file to Whispir’s API, users will make an API call to the /resources endpoint.   Applications can use this endpoint to store the source files for dynamic messages. This endpoint can also be used to store any file based data (e.g. images, pdf documents, spreadsheets) for an unlimited amount of time.    **Note:** The types of files allowed are - &#x60;CSV&#x60;, &#x60;JSON&#x60;, &#x60;XML&#x60;, Images [&#x60;JPEG&#x60;, &#x60;PNG&#x60;], and &#x60;WAV&#x60;.    Information about the resources endpoint is documented in the Resources section of the documentation. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resource resources object that needs to be create resources (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public Resource postResources(String workspaceId, String xApiKey, String contentType, String accept, Resource resource) throws ApiException {
        ApiResponse<Resource> localVarResp = postResourcesWithHttpInfo(workspaceId, xApiKey, contentType, accept, resource);
        return localVarResp.getData();
    }

    /**
     * Create a resource
     * ### High-Level Response Elements  **name:** String   *   Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name. **Eg:** australia-contacts.csv *   **Note:** It is advised that names should not contain spaces or special characters other than &#x60;-&#x60; and &#x60;.&#x60;. This helps for easier search and also for a valid URL link (especially) in case of public scoped files. *   **Eg:** &#x60;australia-contacts.csv&#x60; is better name convention than &#x60;australia contacts.csv&#x60; as the latter converts into &#x60;australia%20contacts.csv&#x60;.    **scope:** String   Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can be only one between:   *   **Public -** Public files have an addressable URL and are available publicly   *   **Private -** Private files have no URL and are only available for bulk messaging purposes and for importing contacts.  **mimeType:** String   The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.   *   **Public -** Public files can be of any mimetype. &#x60;text/html&#x60;; &#x60;text/csv&#x60;   *   **Private -** Private files are restricted to &#x60;CSV&#x60;, &#x60;JSON&#x60;, and &#x60;XML&#x60;  **derefUri:** The base64 representation of the file being submitted.  **Note:** When creating a resource, the following conditions apply -  *   Maximum of 10MB per file being uploaded. *   Transactions will have an enforced timeout. *   Resources will be available in the Whispir Platform for a limited timeframe (30 days). These will then be automatically cleaned. This will be a configurable setting for Whispir Administrators.  ### Upload the Resource file via API   To upload a file to Whispir’s API, users will make an API call to the /resources endpoint.   Applications can use this endpoint to store the source files for dynamic messages. This endpoint can also be used to store any file based data (e.g. images, pdf documents, spreadsheets) for an unlimited amount of time.    **Note:** The types of files allowed are - &#x60;CSV&#x60;, &#x60;JSON&#x60;, &#x60;XML&#x60;, Images [&#x60;JPEG&#x60;, &#x60;PNG&#x60;], and &#x60;WAV&#x60;.    Information about the resources endpoint is documented in the Resources section of the documentation. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resource resources object that needs to be create resources (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Resource> postResourcesWithHttpInfo(String workspaceId, String xApiKey, String contentType, String accept, Resource resource) throws ApiException {
        okhttp3.Call localVarCall = postResourcesValidateBeforeCall(workspaceId, xApiKey, contentType, accept, resource, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a resource (asynchronously)
     * ### High-Level Response Elements  **name:** String   *   Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name. **Eg:** australia-contacts.csv *   **Note:** It is advised that names should not contain spaces or special characters other than &#x60;-&#x60; and &#x60;.&#x60;. This helps for easier search and also for a valid URL link (especially) in case of public scoped files. *   **Eg:** &#x60;australia-contacts.csv&#x60; is better name convention than &#x60;australia contacts.csv&#x60; as the latter converts into &#x60;australia%20contacts.csv&#x60;.    **scope:** String   Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can be only one between:   *   **Public -** Public files have an addressable URL and are available publicly   *   **Private -** Private files have no URL and are only available for bulk messaging purposes and for importing contacts.  **mimeType:** String   The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.   *   **Public -** Public files can be of any mimetype. &#x60;text/html&#x60;; &#x60;text/csv&#x60;   *   **Private -** Private files are restricted to &#x60;CSV&#x60;, &#x60;JSON&#x60;, and &#x60;XML&#x60;  **derefUri:** The base64 representation of the file being submitted.  **Note:** When creating a resource, the following conditions apply -  *   Maximum of 10MB per file being uploaded. *   Transactions will have an enforced timeout. *   Resources will be available in the Whispir Platform for a limited timeframe (30 days). These will then be automatically cleaned. This will be a configurable setting for Whispir Administrators.  ### Upload the Resource file via API   To upload a file to Whispir’s API, users will make an API call to the /resources endpoint.   Applications can use this endpoint to store the source files for dynamic messages. This endpoint can also be used to store any file based data (e.g. images, pdf documents, spreadsheets) for an unlimited amount of time.    **Note:** The types of files allowed are - &#x60;CSV&#x60;, &#x60;JSON&#x60;, &#x60;XML&#x60;, Images [&#x60;JPEG&#x60;, &#x60;PNG&#x60;], and &#x60;WAV&#x60;.    Information about the resources endpoint is documented in the Resources section of the documentation. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resource resources object that needs to be create resources (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postResourcesAsync(String workspaceId, String xApiKey, String contentType, String accept, Resource resource, final ApiCallback<Resource> _callback) throws ApiException {

        okhttp3.Call localVarCall = postResourcesValidateBeforeCall(workspaceId, xApiKey, contentType, accept, resource, _callback);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putResourcesById
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId Enter resources id. (required)
     * @param resource resources object that needs to be update resources (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call putResourcesByIdCall(String workspaceId, String xApiKey, String contentType, String accept, String resourceId, Resource resource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/resources/{resourceId}"
            .replaceAll("\\{" + "workspaceId" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/vnd.whispir.resource-v1+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.whispir.resource-v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putResourcesByIdValidateBeforeCall(String workspaceId, String xApiKey, String contentType, String accept, String resourceId, Resource resource, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling putResourcesById(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling putResourcesById(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling putResourcesById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling putResourcesById(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling putResourcesById(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling putResourcesById(Async)");
        }
        

        okhttp3.Call localVarCall = putResourcesByIdCall(workspaceId, xApiKey, contentType, accept, resourceId, resource, _callback);
        return localVarCall;

    }

    /**
     * Update a resource
     * Updating a resource involves the same process as in creating a resource. The process of using one of the format (CSV, JSON, XML) for private and any format for public -&gt; converting to base64 encoded data is the same.   The change is doing a PUT to the existing resource URL that needs to be updated. Please be careful that doing an update overwrites the previous resource. There is no versioning available in Whispir for the resources.   Any or all of the 4 values can be changed. i.e, name, scope, mimeType, derefUri, but all 4 are mandatory values to be sent. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId Enter resources id. (required)
     * @param resource resources object that needs to be update resources (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public Resource putResourcesById(String workspaceId, String xApiKey, String contentType, String accept, String resourceId, Resource resource) throws ApiException {
        ApiResponse<Resource> localVarResp = putResourcesByIdWithHttpInfo(workspaceId, xApiKey, contentType, accept, resourceId, resource);
        return localVarResp.getData();
    }

    /**
     * Update a resource
     * Updating a resource involves the same process as in creating a resource. The process of using one of the format (CSV, JSON, XML) for private and any format for public -&gt; converting to base64 encoded data is the same.   The change is doing a PUT to the existing resource URL that needs to be updated. Please be careful that doing an update overwrites the previous resource. There is no versioning available in Whispir for the resources.   Any or all of the 4 values can be changed. i.e, name, scope, mimeType, derefUri, but all 4 are mandatory values to be sent. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId Enter resources id. (required)
     * @param resource resources object that needs to be update resources (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Resource> putResourcesByIdWithHttpInfo(String workspaceId, String xApiKey, String contentType, String accept, String resourceId, Resource resource) throws ApiException {
        okhttp3.Call localVarCall = putResourcesByIdValidateBeforeCall(workspaceId, xApiKey, contentType, accept, resourceId, resource, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a resource (asynchronously)
     * Updating a resource involves the same process as in creating a resource. The process of using one of the format (CSV, JSON, XML) for private and any format for public -&gt; converting to base64 encoded data is the same.   The change is doing a PUT to the existing resource URL that needs to be updated. Please be careful that doing an update overwrites the previous resource. There is no versioning available in Whispir for the resources.   Any or all of the 4 values can be changed. i.e, name, scope, mimeType, derefUri, but all 4 are mandatory values to be sent. 
     * @param workspaceId The identifier for the workspace. (required)
     * @param xApiKey The API key for authentication. (required)
     * @param contentType Application specific mime-type. (required)
     * @param accept Application specific mime-type. (required)
     * @param resourceId Enter resources id. (required)
     * @param resource resources object that needs to be update resources (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource endpoint response </td><td>  * Content-Type -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Cache-Control -  <br>  * Expires -  <br>  * Location - The URI to fetch details of the resource. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing request parameters.  Inspect the request parameters and ensure that all required parameters are supplied.  Note the error text in the response and update the request accordingly. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 401 </td><td> Invalid or no credentials passed in the request.  Inspect the authorisation header and ensure that a valid authentication has been provided. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 403 </td><td> Authorisation credentials passed and accepted but the account doesn&#39;t have permission.  * Inspect the authorisation header and ensure that a valid authentication has been provided. * Returned when HTTP is used instead of HTTPS. * Returned when invalid API key is used. * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested URL doesn&#39;t exist.  The requested resource was not found. Inspect the ID in the URL that was used and ensure that it&#39;s valid.  Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 405 </td><td> The requested resource doesn&#39;t support the supplied verb.  Inspect the HTTP method that was used in the request and ensure that it&#39;s valid for the resource being requested. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 413 </td><td> The request payload was too large.  The maximum allowable request size is 10MB (10485760 bytes). </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 415 </td><td> The request was unsuccessful because the requested content type is not supported by the API.  The application client can use this response to determine if it&#39;s asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.  In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 422 </td><td> The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it&#39;s not provided in the request.  The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred when processing the request.  Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team. </td><td>  * Content-Type -  <br>  * Content-Length -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
        <tr><td> 501 </td><td> The HTTP method being used has not yet been implemented for the requested resource.  The method being used is not implemented for this resource. Check the documentation for the specific resource type. </td><td>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * Cache-Control -  <br>  * Expires -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call putResourcesByIdAsync(String workspaceId, String xApiKey, String contentType, String accept, String resourceId, Resource resource, final ApiCallback<Resource> _callback) throws ApiException {

        okhttp3.Call localVarCall = putResourcesByIdValidateBeforeCall(workspaceId, xApiKey, contentType, accept, resourceId, resource, _callback);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
