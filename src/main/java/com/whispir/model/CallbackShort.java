/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.whispir.model.Link;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.whispir.client.JSON;

/**
 * CallbackShort
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-06T03:10:46.360132Z[Etc/UTC]")
public class CallbackShort {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_RETRIES_ENABLED = "retriesEnabled";
  @SerializedName(SERIALIZED_NAME_RETRIES_ENABLED)
  private Boolean retriesEnabled = false;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<Link> link = null;

  public CallbackShort() { 
  }

  
  public CallbackShort(
     String id, 
     String name, 
     String url, 
     Boolean retriesEnabled, 
     List<Link> link
  ) {
    this();
    this.id = id;
    this.name = name;
    this.url = url;
    this.retriesEnabled = retriesEnabled;
    this.link = link;
  }

   /**
   * The id of the callback.   This is the value that should be passed when referring to the callback using the API endpoints
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "D7D2295E2A08388C", value = "The id of the callback.   This is the value that should be passed when referring to the callback using the API endpoints")

  public String getId() {
    return id;
  }




   /**
   * The name of the callback.   This is the value that should be passed in the message payload for triggering the callbacks
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "callback1", value = "The name of the callback.   This is the value that should be passed in the message payload for triggering the callbacks")

  public String getName() {
    return name;
  }




   /**
   * The destination url on your servers that Whispir should reach out to.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://e05237bf.ngrol.io/", value = "The destination url on your servers that Whispir should reach out to.")

  public String getUrl() {
    return url;
  }




   /**
   * If retriesEnabled is false, then Whispir will only try once and when a failure (non 200 OK response code) happens, it will not retry again  When true, it will try every 5 mins for a maximum of 10 times.  Refer to callback calls for more details on retrieving the SUCCESS and FAIL logs
   * @return retriesEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If retriesEnabled is false, then Whispir will only try once and when a failure (non 200 OK response code) happens, it will not retry again  When true, it will try every 5 mins for a maximum of 10 times.  Refer to callback calls for more details on retrieving the SUCCESS and FAIL logs")

  public Boolean getRetriesEnabled() {
    return retriesEnabled;
  }




   /**
   * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.")

  public List<Link> getLink() {
    return link;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallbackShort callbackShort = (CallbackShort) o;
    return Objects.equals(this.id, callbackShort.id) &&
        Objects.equals(this.name, callbackShort.name) &&
        Objects.equals(this.url, callbackShort.url) &&
        Objects.equals(this.retriesEnabled, callbackShort.retriesEnabled) &&
        Objects.equals(this.link, callbackShort.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, url, retriesEnabled, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallbackShort {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    retriesEnabled: ").append(toIndentedString(retriesEnabled)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("retriesEnabled");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CallbackShort
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CallbackShort.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallbackShort is not found in the empty JSON string", CallbackShort.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CallbackShort.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallbackShort` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
      if (jsonArraylink != null) {
        // ensure the json data is an array
        if (!jsonObj.get("link").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
        }

        // validate the optional field `link` (array)
        for (int i = 0; i < jsonArraylink.size(); i++) {
          Link.validateJsonObject(jsonArraylink.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallbackShort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallbackShort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallbackShort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallbackShort.class));

       return (TypeAdapter<T>) new TypeAdapter<CallbackShort>() {
           @Override
           public void write(JsonWriter out, CallbackShort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallbackShort read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CallbackShort given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CallbackShort
  * @throws IOException if the JSON string is invalid with respect to CallbackShort
  */
  public static CallbackShort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallbackShort.class);
  }

 /**
  * Convert an instance of CallbackShort to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

