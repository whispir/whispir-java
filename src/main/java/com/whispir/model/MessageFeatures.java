/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.whispir.model.MessageFeaturesAliasOption;
import com.whispir.model.MessageFeaturesPushOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.whispir.client.JSON;

/**
 * ### Push Messaging  Whispir allows you to send push notifications to any iOS and Android-based apps  Setting up the platform to handle push notifications involves some one-time steps and some periodically repeated steps (updating push tokens). See Apps to get a clear understanding of the related steps and endpoints. Whispir doesn&#39;t support sending push notifications to device tokens directly. Read more in Contact devices about how to register the device tokens under contacts.  ### Message Aliasing  The Whispir UI allows you to configure a sender alias from which messages are sent. Instructions for alias creation can be found in [Configure message aliases](https://au.whispir.com/onlinehelp/Content/Topics-whispir-ua/administration/alias-manager/config-message-aliases.htm) within Whispir documentation.  The message alias can be attached to a message to template, to configure the the sender for the following channels: * SMS - a custom mobile number, e.g. +61 123 456 789 * Email - a custom email address, e.g. marketing@example.com * Voice - a custom mobile number, e.g. +61 123 456 789
 */
@ApiModel(description = "### Push Messaging  Whispir allows you to send push notifications to any iOS and Android-based apps  Setting up the platform to handle push notifications involves some one-time steps and some periodically repeated steps (updating push tokens). See Apps to get a clear understanding of the related steps and endpoints. Whispir doesn't support sending push notifications to device tokens directly. Read more in Contact devices about how to register the device tokens under contacts.  ### Message Aliasing  The Whispir UI allows you to configure a sender alias from which messages are sent. Instructions for alias creation can be found in [Configure message aliases](https://au.whispir.com/onlinehelp/Content/Topics-whispir-ua/administration/alias-manager/config-message-aliases.htm) within Whispir documentation.  The message alias can be attached to a message to template, to configure the the sender for the following channels: * SMS - a custom mobile number, e.g. +61 123 456 789 * Email - a custom email address, e.g. marketing@example.com * Voice - a custom mobile number, e.g. +61 123 456 789")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-06T03:10:46.360132Z[Etc/UTC]")
public class MessageFeatures {
  public static final String SERIALIZED_NAME_PUSH_OPTIONS = "pushOptions";
  @SerializedName(SERIALIZED_NAME_PUSH_OPTIONS)
  private MessageFeaturesPushOptions pushOptions;

  public static final String SERIALIZED_NAME_ALIAS_OPTION = "aliasOption";
  @SerializedName(SERIALIZED_NAME_ALIAS_OPTION)
  private MessageFeaturesAliasOption aliasOption;

  public MessageFeatures() { 
  }

  public MessageFeatures pushOptions(MessageFeaturesPushOptions pushOptions) {
    
    this.pushOptions = pushOptions;
    return this;
  }

   /**
   * Get pushOptions
   * @return pushOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageFeaturesPushOptions getPushOptions() {
    return pushOptions;
  }


  public void setPushOptions(MessageFeaturesPushOptions pushOptions) {
    this.pushOptions = pushOptions;
  }


  public MessageFeatures aliasOption(MessageFeaturesAliasOption aliasOption) {
    
    this.aliasOption = aliasOption;
    return this;
  }

   /**
   * Get aliasOption
   * @return aliasOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageFeaturesAliasOption getAliasOption() {
    return aliasOption;
  }


  public void setAliasOption(MessageFeaturesAliasOption aliasOption) {
    this.aliasOption = aliasOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageFeatures messageFeatures = (MessageFeatures) o;
    return Objects.equals(this.pushOptions, messageFeatures.pushOptions) &&
        Objects.equals(this.aliasOption, messageFeatures.aliasOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pushOptions, aliasOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageFeatures {\n");
    sb.append("    pushOptions: ").append(toIndentedString(pushOptions)).append("\n");
    sb.append("    aliasOption: ").append(toIndentedString(aliasOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pushOptions");
    openapiFields.add("aliasOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessageFeatures
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MessageFeatures.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageFeatures is not found in the empty JSON string", MessageFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MessageFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageFeatures` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `pushOptions`
      if (jsonObj.getAsJsonObject("pushOptions") != null) {
        MessageFeaturesPushOptions.validateJsonObject(jsonObj.getAsJsonObject("pushOptions"));
      }
      // validate the optional field `aliasOption`
      if (jsonObj.getAsJsonObject("aliasOption") != null) {
        MessageFeaturesAliasOption.validateJsonObject(jsonObj.getAsJsonObject("aliasOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageFeatures>() {
           @Override
           public void write(JsonWriter out, MessageFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageFeatures read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessageFeatures given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessageFeatures
  * @throws IOException if the JSON string is invalid with respect to MessageFeatures
  */
  public static MessageFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageFeatures.class);
  }

 /**
  * Convert an instance of MessageFeatures to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

