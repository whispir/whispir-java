/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.whispir.client.JSON;

/**
 * The object to configure message channel options.
 */
@ApiModel(description = "The object to configure message channel options.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-06T03:10:46.360132Z[Etc/UTC]")
public class ContactMessagingOption {
  /**
   * The message channel.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    SMS("sms"),
    
    EMAIL("email"),
    
    VOICE("voice");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * The primary contact address for the &#x60;channel&#x60;.
   */
  @JsonAdapter(PrimaryEnum.Adapter.class)
  public enum PrimaryEnum {
    WORKMOBILEPHONE1("WorkMobilePhone1"),
    
    WORKMOBILEPHONE2("WorkMobilePhone2"),
    
    WORKEMAILADDRESS1("WorkEmailAddress1"),
    
    WORKEMAILADDRESS2("WorkEmailAddress2"),
    
    PERSONALMOBILEPHONE1("PersonalMobilePhone1"),
    
    PERSONALEMAILADDRESS1("PersonalEmailAddress1");

    private String value;

    PrimaryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrimaryEnum fromValue(String value) {
      for (PrimaryEnum b : PrimaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrimaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrimaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrimaryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrimaryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private PrimaryEnum primary;

  /**
   * The secondary contact address for the &#x60;channel&#x60;.
   */
  @JsonAdapter(SecondaryEnum.Adapter.class)
  public enum SecondaryEnum {
    WORKMOBILEPHONE1("WorkMobilePhone1"),
    
    WORKMOBILEPHONE2("WorkMobilePhone2"),
    
    WORKEMAILADDRESS1("WorkEmailAddress1"),
    
    WORKEMAILADDRESS2("WorkEmailAddress2"),
    
    PERSONALMOBILEPHONE1("PersonalMobilePhone1"),
    
    PERSONALEMAILADDRESS1("PersonalEmailAddress1");

    private String value;

    SecondaryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecondaryEnum fromValue(String value) {
      for (SecondaryEnum b : SecondaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecondaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecondaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecondaryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecondaryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECONDARY = "secondary";
  @SerializedName(SERIALIZED_NAME_SECONDARY)
  private SecondaryEnum secondary;

  /**
   * The tertiary contact address for the &#x60;channel&#x60;.
   */
  @JsonAdapter(TertiaryEnum.Adapter.class)
  public enum TertiaryEnum {
    WORKMOBILEPHONE1("WorkMobilePhone1"),
    
    WORKMOBILEPHONE2("WorkMobilePhone2"),
    
    WORKEMAILADDRESS1("WorkEmailAddress1"),
    
    WORKEMAILADDRESS2("WorkEmailAddress2"),
    
    PERSONALMOBILEPHONE1("PersonalMobilePhone1"),
    
    PERSONALEMAILADDRESS1("PersonalEmailAddress1");

    private String value;

    TertiaryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TertiaryEnum fromValue(String value) {
      for (TertiaryEnum b : TertiaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TertiaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TertiaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TertiaryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TertiaryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TERTIARY = "tertiary";
  @SerializedName(SERIALIZED_NAME_TERTIARY)
  private TertiaryEnum tertiary;

  public ContactMessagingOption() { 
  }

  public ContactMessagingOption channel(ChannelEnum channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * The message channel.
   * @return channel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The message channel.")

  public ChannelEnum getChannel() {
    return channel;
  }


  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public ContactMessagingOption enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * A boolean flag indicating whether messaging is enabled for the &#x60;channel&#x60;.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "A boolean flag indicating whether messaging is enabled for the `channel`.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ContactMessagingOption primary(PrimaryEnum primary) {
    
    this.primary = primary;
    return this;
  }

   /**
   * The primary contact address for the &#x60;channel&#x60;.
   * @return primary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The primary contact address for the `channel`.")

  public PrimaryEnum getPrimary() {
    return primary;
  }


  public void setPrimary(PrimaryEnum primary) {
    this.primary = primary;
  }


  public ContactMessagingOption secondary(SecondaryEnum secondary) {
    
    this.secondary = secondary;
    return this;
  }

   /**
   * The secondary contact address for the &#x60;channel&#x60;.
   * @return secondary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The secondary contact address for the `channel`.")

  public SecondaryEnum getSecondary() {
    return secondary;
  }


  public void setSecondary(SecondaryEnum secondary) {
    this.secondary = secondary;
  }


  public ContactMessagingOption tertiary(TertiaryEnum tertiary) {
    
    this.tertiary = tertiary;
    return this;
  }

   /**
   * The tertiary contact address for the &#x60;channel&#x60;.
   * @return tertiary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tertiary contact address for the `channel`.")

  public TertiaryEnum getTertiary() {
    return tertiary;
  }


  public void setTertiary(TertiaryEnum tertiary) {
    this.tertiary = tertiary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactMessagingOption contactMessagingOption = (ContactMessagingOption) o;
    return Objects.equals(this.channel, contactMessagingOption.channel) &&
        Objects.equals(this.enabled, contactMessagingOption.enabled) &&
        Objects.equals(this.primary, contactMessagingOption.primary) &&
        Objects.equals(this.secondary, contactMessagingOption.secondary) &&
        Objects.equals(this.tertiary, contactMessagingOption.tertiary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, enabled, primary, secondary, tertiary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactMessagingOption {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    secondary: ").append(toIndentedString(secondary)).append("\n");
    sb.append("    tertiary: ").append(toIndentedString(tertiary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("enabled");
    openapiFields.add("primary");
    openapiFields.add("secondary");
    openapiFields.add("tertiary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactMessagingOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ContactMessagingOption.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactMessagingOption is not found in the empty JSON string", ContactMessagingOption.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ContactMessagingOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactMessagingOption` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (jsonObj.get("primary") != null && !jsonObj.get("primary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary").toString()));
      }
      if (jsonObj.get("secondary") != null && !jsonObj.get("secondary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary").toString()));
      }
      if (jsonObj.get("tertiary") != null && !jsonObj.get("tertiary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tertiary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tertiary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactMessagingOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactMessagingOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactMessagingOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactMessagingOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactMessagingOption>() {
           @Override
           public void write(JsonWriter out, ContactMessagingOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactMessagingOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactMessagingOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactMessagingOption
  * @throws IOException if the JSON string is invalid with respect to ContactMessagingOption
  */
  public static ContactMessagingOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactMessagingOption.class);
  }

 /**
  * Convert an instance of ContactMessagingOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

