/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.whispir.client.JSON;

/**
 * A fixed object structure used by for Whispir internally for tracking purposes.
 */
@ApiModel(description = "A fixed object structure used by for Whispir internally for tracking purposes.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-06T03:10:46.360132Z[Etc/UTC]")
public class MessageDlr {
  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PUBLISH_TO_WEB = "publishToWeb";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TO_WEB)
  private Boolean publishToWeb;

  public static final String SERIALIZED_NAME_EXPIRY_DAY = "expiryDay";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DAY)
  private BigDecimal expiryDay;

  public static final String SERIALIZED_NAME_EXPIRY_HOUR = "expiryHour";
  @SerializedName(SERIALIZED_NAME_EXPIRY_HOUR)
  private BigDecimal expiryHour;

  public static final String SERIALIZED_NAME_EXPIRY_MIN = "expiryMin";
  @SerializedName(SERIALIZED_NAME_EXPIRY_MIN)
  private BigDecimal expiryMin;

  public static final String SERIALIZED_NAME_FEED_IDS = "feedIds";
  @SerializedName(SERIALIZED_NAME_FEED_IDS)
  private String feedIds;

  public static final String SERIALIZED_NAME_BOOL = "bool";
  @SerializedName(SERIALIZED_NAME_BOOL)
  private Boolean bool;

  public MessageDlr() { 
  }

  public MessageDlr period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * The period of the message delivery.
   * @return period
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The period of the message delivery.")

  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }


  public MessageDlr rule(String rule) {
    
    this.rule = rule;
    return this;
  }

   /**
   * The rule of the message delivery.
   * @return rule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The rule of the message delivery.")

  public String getRule() {
    return rule;
  }


  public void setRule(String rule) {
    this.rule = rule;
  }


  public MessageDlr type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the message delivery.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The type of the message delivery.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public MessageDlr publishToWeb(Boolean publishToWeb) {
    
    this.publishToWeb = publishToWeb;
    return this;
  }

   /**
   * Specifies whether the message was published to the web.
   * @return publishToWeb
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies whether the message was published to the web.")

  public Boolean getPublishToWeb() {
    return publishToWeb;
  }


  public void setPublishToWeb(Boolean publishToWeb) {
    this.publishToWeb = publishToWeb;
  }


  public MessageDlr expiryDay(BigDecimal expiryDay) {
    
    this.expiryDay = expiryDay;
    return this;
  }

   /**
   * Specifies the number of days before the message expires.
   * @return expiryDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Specifies the number of days before the message expires.")

  public BigDecimal getExpiryDay() {
    return expiryDay;
  }


  public void setExpiryDay(BigDecimal expiryDay) {
    this.expiryDay = expiryDay;
  }


  public MessageDlr expiryHour(BigDecimal expiryHour) {
    
    this.expiryHour = expiryHour;
    return this;
  }

   /**
   * Specifies the number of hours before the message expires.
   * @return expiryHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Specifies the number of hours before the message expires.")

  public BigDecimal getExpiryHour() {
    return expiryHour;
  }


  public void setExpiryHour(BigDecimal expiryHour) {
    this.expiryHour = expiryHour;
  }


  public MessageDlr expiryMin(BigDecimal expiryMin) {
    
    this.expiryMin = expiryMin;
    return this;
  }

   /**
   * Specifies the number of minutes before the message expires.
   * @return expiryMin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Specifies the number of minutes before the message expires.")

  public BigDecimal getExpiryMin() {
    return expiryMin;
  }


  public void setExpiryMin(BigDecimal expiryMin) {
    this.expiryMin = expiryMin;
  }


  public MessageDlr feedIds(String feedIds) {
    
    this.feedIds = feedIds;
    return this;
  }

   /**
   * The feeds identifier for the message delivery.
   * @return feedIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The feeds identifier for the message delivery.")

  public String getFeedIds() {
    return feedIds;
  }


  public void setFeedIds(String feedIds) {
    this.feedIds = feedIds;
  }


  public MessageDlr bool(Boolean bool) {
    
    this.bool = bool;
    return this;
  }

   /**
   * The bool field for the message delivery.
   * @return bool
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The bool field for the message delivery.")

  public Boolean getBool() {
    return bool;
  }


  public void setBool(Boolean bool) {
    this.bool = bool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageDlr messageDlr = (MessageDlr) o;
    return Objects.equals(this.period, messageDlr.period) &&
        Objects.equals(this.rule, messageDlr.rule) &&
        Objects.equals(this.type, messageDlr.type) &&
        Objects.equals(this.publishToWeb, messageDlr.publishToWeb) &&
        Objects.equals(this.expiryDay, messageDlr.expiryDay) &&
        Objects.equals(this.expiryHour, messageDlr.expiryHour) &&
        Objects.equals(this.expiryMin, messageDlr.expiryMin) &&
        Objects.equals(this.feedIds, messageDlr.feedIds) &&
        Objects.equals(this.bool, messageDlr.bool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(period, rule, type, publishToWeb, expiryDay, expiryHour, expiryMin, feedIds, bool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageDlr {\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    publishToWeb: ").append(toIndentedString(publishToWeb)).append("\n");
    sb.append("    expiryDay: ").append(toIndentedString(expiryDay)).append("\n");
    sb.append("    expiryHour: ").append(toIndentedString(expiryHour)).append("\n");
    sb.append("    expiryMin: ").append(toIndentedString(expiryMin)).append("\n");
    sb.append("    feedIds: ").append(toIndentedString(feedIds)).append("\n");
    sb.append("    bool: ").append(toIndentedString(bool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("period");
    openapiFields.add("rule");
    openapiFields.add("type");
    openapiFields.add("publishToWeb");
    openapiFields.add("expiryDay");
    openapiFields.add("expiryHour");
    openapiFields.add("expiryMin");
    openapiFields.add("feedIds");
    openapiFields.add("bool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("period");
    openapiRequiredFields.add("rule");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("publishToWeb");
    openapiRequiredFields.add("expiryDay");
    openapiRequiredFields.add("expiryHour");
    openapiRequiredFields.add("expiryMin");
    openapiRequiredFields.add("feedIds");
    openapiRequiredFields.add("bool");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessageDlr
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MessageDlr.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageDlr is not found in the empty JSON string", MessageDlr.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MessageDlr.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageDlr` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageDlr.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("period") != null && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("feedIds") != null && !jsonObj.get("feedIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageDlr.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageDlr' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageDlr> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageDlr.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageDlr>() {
           @Override
           public void write(JsonWriter out, MessageDlr value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageDlr read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessageDlr given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessageDlr
  * @throws IOException if the JSON string is invalid with respect to MessageDlr
  */
  public static MessageDlr fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageDlr.class);
  }

 /**
  * Convert an instance of MessageDlr to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

