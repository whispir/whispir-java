/*
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.whispir.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.whispir.model.Link;
import com.whispir.model.MessageDlr;
import com.whispir.model.MessageEmail;
import com.whispir.model.MessageFeatures;
import com.whispir.model.MessageSocial;
import com.whispir.model.MessageVoice;
import com.whispir.model.MessageWeb;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.whispir.client.JSON;

/**
 * The template object.
 */
@ApiModel(description = "The template object.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-06T03:10:46.360132Z[Etc/UTC]")
public class Template {
  public static final String SERIALIZED_NAME_MESSAGE_TEMPLATE_NAME = "messageTemplateName";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEMPLATE_NAME)
  private String messageTemplateName;

  public static final String SERIALIZED_NAME_MESSAGE_TEMPLATE_DESCRIPTION = "messageTemplateDescription";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEMPLATE_DESCRIPTION)
  private String messageTemplateDescription;

  public static final String SERIALIZED_NAME_RESPONSE_TEMPLATE_ID = "responseTemplateId";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEMPLATE_ID)
  private String responseTemplateId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private MessageEmail email;

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private MessageVoice voice;

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private MessageWeb web;

  public static final String SERIALIZED_NAME_SOCIAL = "social";
  @SerializedName(SERIALIZED_NAME_SOCIAL)
  private MessageSocial social;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private MessageFeatures features;

  public static final String SERIALIZED_NAME_DLR = "dlr";
  @SerializedName(SERIALIZED_NAME_DLR)
  private MessageDlr dlr;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<Link> link = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id = "7DB65E1D8853D1C8";

  public Template() { 
  }

  
  public Template(
     String messageTemplateName, 
     List<Link> link, 
     String tags, 
     String id
  ) {
    this();
    this.messageTemplateName = messageTemplateName;
    this.link = link;
    this.tags = tags;
    this.id = id;
  }

   /**
   * Specifies the name of the message template to be used within message requests.
   * @return messageTemplateName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sample SMS Template", required = true, value = "Specifies the name of the message template to be used within message requests.")

  public String getMessageTemplateName() {
    return messageTemplateName;
  }




  public Template messageTemplateDescription(String messageTemplateDescription) {
    
    this.messageTemplateDescription = messageTemplateDescription;
    return this;
  }

   /**
   * Specifies the description of the message template for others to understand its purpose.
   * @return messageTemplateDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Template to provide an example on whispir.io", value = "Specifies the description of the message template for others to understand its purpose.")

  public String getMessageTemplateDescription() {
    return messageTemplateDescription;
  }


  public void setMessageTemplateDescription(String messageTemplateDescription) {
    this.messageTemplateDescription = messageTemplateDescription;
  }


  public Template responseTemplateId(String responseTemplateId) {
    
    this.responseTemplateId = responseTemplateId;
    return this;
  }

   /**
   * Specifies the ID of the Response Rule that should be associated with this Message Template.
   * @return responseTemplateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "responseTemplateId", value = "Specifies the ID of the Response Rule that should be associated with this Message Template.")

  public String getResponseTemplateId() {
    return responseTemplateId;
  }


  public void setResponseTemplateId(String responseTemplateId) {
    this.responseTemplateId = responseTemplateId;
  }


  public Template subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Specifies the first line of the SMS message or Voice call, and the subject of the Email message.
   * @return subject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Test SMS Message", required = true, value = "Specifies the first line of the SMS message or Voice call, and the subject of the Email message.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Template body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Specifies the content of the SMS message.
   * @return body
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "This is the body of my test SMS message", required = true, value = "Specifies the content of the SMS message.")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public Template email(MessageEmail email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageEmail getEmail() {
    return email;
  }


  public void setEmail(MessageEmail email) {
    this.email = email;
  }


  public Template voice(MessageVoice voice) {
    
    this.voice = voice;
    return this;
  }

   /**
   * Get voice
   * @return voice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageVoice getVoice() {
    return voice;
  }


  public void setVoice(MessageVoice voice) {
    this.voice = voice;
  }


  public Template web(MessageWeb web) {
    
    this.web = web;
    return this;
  }

   /**
   * Get web
   * @return web
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageWeb getWeb() {
    return web;
  }


  public void setWeb(MessageWeb web) {
    this.web = web;
  }


  public Template social(MessageSocial social) {
    
    this.social = social;
    return this;
  }

   /**
   * Get social
   * @return social
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageSocial getSocial() {
    return social;
  }


  public void setSocial(MessageSocial social) {
    this.social = social;
  }


  public Template type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Allows the user to modify the message behaviour for replies and DLRs (delivery receipts)
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "defaultNoReply", value = "Allows the user to modify the message behaviour for replies and DLRs (delivery receipts)")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Template features(MessageFeatures features) {
    
    this.features = features;
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageFeatures getFeatures() {
    return features;
  }


  public void setFeatures(MessageFeatures features) {
    this.features = features;
  }


  public Template dlr(MessageDlr dlr) {
    
    this.dlr = dlr;
    return this;
  }

   /**
   * Get dlr
   * @return dlr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageDlr getDlr() {
    return dlr;
  }


  public void setDlr(MessageDlr dlr) {
    this.dlr = dlr;
  }


   /**
   * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.")

  public List<Link> getLink() {
    return link;
  }




   /**
   * Information which helps to label related message templates together
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "campaign", value = "Information which helps to label related message templates together")

  public String getTags() {
    return tags;
  }




   /**
   * specifies the id of the message template
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7DB65E1D8853D1C8", value = "specifies the id of the message template")

  public String getId() {
    return id;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Template template = (Template) o;
    return Objects.equals(this.messageTemplateName, template.messageTemplateName) &&
        Objects.equals(this.messageTemplateDescription, template.messageTemplateDescription) &&
        Objects.equals(this.responseTemplateId, template.responseTemplateId) &&
        Objects.equals(this.subject, template.subject) &&
        Objects.equals(this.body, template.body) &&
        Objects.equals(this.email, template.email) &&
        Objects.equals(this.voice, template.voice) &&
        Objects.equals(this.web, template.web) &&
        Objects.equals(this.social, template.social) &&
        Objects.equals(this.type, template.type) &&
        Objects.equals(this.features, template.features) &&
        Objects.equals(this.dlr, template.dlr) &&
        Objects.equals(this.link, template.link) &&
        Objects.equals(this.tags, template.tags) &&
        Objects.equals(this.id, template.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageTemplateName, messageTemplateDescription, responseTemplateId, subject, body, email, voice, web, social, type, features, dlr, link, tags, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Template {\n");
    sb.append("    messageTemplateName: ").append(toIndentedString(messageTemplateName)).append("\n");
    sb.append("    messageTemplateDescription: ").append(toIndentedString(messageTemplateDescription)).append("\n");
    sb.append("    responseTemplateId: ").append(toIndentedString(responseTemplateId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("    social: ").append(toIndentedString(social)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    dlr: ").append(toIndentedString(dlr)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageTemplateName");
    openapiFields.add("messageTemplateDescription");
    openapiFields.add("responseTemplateId");
    openapiFields.add("subject");
    openapiFields.add("body");
    openapiFields.add("email");
    openapiFields.add("voice");
    openapiFields.add("web");
    openapiFields.add("social");
    openapiFields.add("type");
    openapiFields.add("features");
    openapiFields.add("dlr");
    openapiFields.add("link");
    openapiFields.add("tags");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageTemplateName");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("body");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Template
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Template.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Template is not found in the empty JSON string", Template.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Template.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Template` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Template.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("messageTemplateName") != null && !jsonObj.get("messageTemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageTemplateName").toString()));
      }
      if (jsonObj.get("messageTemplateDescription") != null && !jsonObj.get("messageTemplateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTemplateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageTemplateDescription").toString()));
      }
      if (jsonObj.get("responseTemplateId") != null && !jsonObj.get("responseTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseTemplateId").toString()));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `email`
      if (jsonObj.getAsJsonObject("email") != null) {
        MessageEmail.validateJsonObject(jsonObj.getAsJsonObject("email"));
      }
      // validate the optional field `voice`
      if (jsonObj.getAsJsonObject("voice") != null) {
        MessageVoice.validateJsonObject(jsonObj.getAsJsonObject("voice"));
      }
      // validate the optional field `web`
      if (jsonObj.getAsJsonObject("web") != null) {
        MessageWeb.validateJsonObject(jsonObj.getAsJsonObject("web"));
      }
      // validate the optional field `social`
      if (jsonObj.getAsJsonObject("social") != null) {
        MessageSocial.validateJsonObject(jsonObj.getAsJsonObject("social"));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `features`
      if (jsonObj.getAsJsonObject("features") != null) {
        MessageFeatures.validateJsonObject(jsonObj.getAsJsonObject("features"));
      }
      // validate the optional field `dlr`
      if (jsonObj.getAsJsonObject("dlr") != null) {
        MessageDlr.validateJsonObject(jsonObj.getAsJsonObject("dlr"));
      }
      JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
      if (jsonArraylink != null) {
        // ensure the json data is an array
        if (!jsonObj.get("link").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
        }

        // validate the optional field `link` (array)
        for (int i = 0; i < jsonArraylink.size(); i++) {
          Link.validateJsonObject(jsonArraylink.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Template.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Template' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Template> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Template.class));

       return (TypeAdapter<T>) new TypeAdapter<Template>() {
           @Override
           public void write(JsonWriter out, Template value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Template read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Template given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Template
  * @throws IOException if the JSON string is invalid with respect to Template
  */
  public static Template fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Template.class);
  }

 /**
  * Convert an instance of Template to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

