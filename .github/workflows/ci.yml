# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
# This file is auto-generated by OpenAPI Generator (https://openapi-generator.tech)

name: Java CI with Gradle

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build Whispir Platform API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        id: setup-jre
        uses: actions/setup-java@v2
        with:
          java-version: "18" # always use 18 for building
          distribution: "temurin"
          architecture: x64

      - name: Set Test Java Runtime Environment variable
        run: echo "JAVA_TEST_HOME=${{ steps.setup-jre.outputs.path }}" >> $GITHUB_ENV

      - name: Build artifacts
        run: ./gradlew assemble
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: # https://github.com/actions/setup-java#supported-version-syntax
          - "8"
          - "11"
          - "16"
          - "17"
          - "18"

    steps:
      - uses: actions/checkout@v2

      - name: Setup Test Java runtime
        id: setup-test-jre
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
          architecture: x64

      - name: Set Test Java Runtime Environment variable
        run: echo "JAVA_TEST_HOME=${{ steps.setup-test-jre.outputs.path }}" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: "18" # always use 18 for building
          distribution: "temurin"
          architecture: x64

      - name: Tweak gradle.properties for Java 1.8
        if: ${{ matrix.java-version == '1.8' }}
        run: sed -e '/--add-exports/ s/^#*/#/' -i gradle.properties

      - name: Display version
        run: |
          ./gradlew --version
          echo "JAVA_TEST_HOME=$JAVA_TEST_HOME"

      - name: Run test suite
        run: ./gradlew test
  publish:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Setup Java
        id: setup-jre
        uses: actions/setup-java@v2
        with:
          java-version: "18" # always use 18 for building
          distribution: "temurin"
          architecture: x64
      - name: Set Test Java Runtime Environment variable
        run: echo "JAVA_TEST_HOME=${{ steps.setup-jre.outputs.path }}" >> $GITHUB_ENV

      - name: Configure GPG Key
        run: |
          set -ex
          echo $GPG_SIGNING_PRIVKEY | base64 --decode | gpg --import --batch --yes --pinentry-mode loopback --passphrase "$GPG_SIGNING_PASSPHRASE"
        env:
          GPG_SIGNING_PRIVKEY: ${{ secrets.GPG_SIGNING_PRIVKEY }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}

      - name: Publish package
        run: |
          ./gradlew publish closeAndRelease -Dorg.gradle.project.NEXUS_USERNAME=$NEXUS_USERNAME -Dorg.gradle.project.NEXUS_PASSWORD=$NEXUS_PASSWORD -Dorg.gradle.project.signing.gnupg.keyName=$GPG_SIGNING_KEYID -Dorg.gradle.project.signing.gnupg.passphrase=$GPG_SIGNING_PASSPHRASE
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          GPG_SIGNING_KEYID: ${{ secrets.GPG_SIGNING_KEYID }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}
